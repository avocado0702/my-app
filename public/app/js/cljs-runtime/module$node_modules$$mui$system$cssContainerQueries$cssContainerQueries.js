shadow$provide.module$node_modules$$mui$system$cssContainerQueries$cssContainerQueries = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(themeInput) {
    function attachCq(node, name) {
      node.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
      node.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
      node.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
      node.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
      node.not = (...args) => {
        args = toContainerQuery(themeInput.breakpoints.not(...args), name);
        return args.includes("not all and") ? args.replace("not all and ", "").replace("min-width:", "width\x3c").replace("max-width:", "width\x3e").replace("and", "or") : args;
      };
    }
    const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container"), node = {}, containerQueries = name => {
      attachCq(node, name);
      return node;
    };
    attachCq(containerQueries);
    return {...themeInput, containerQueries};
  };
  exports.getContainerQuery = function(theme, shorthand) {
    const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
    if (!matches) {
      throw Error(`MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.\n` + "For example, `@sm` or `@600` or `@40rem/sidebar`.");
    }
    const [, containerQuery, containerName] = matches;
    shorthand = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
    return theme.containerQueries(containerName).up(shorthand);
  };
  exports.isCqShorthand = function(breakpointKeys, value) {
    return "@" === value || value.startsWith("@") && (breakpointKeys.some(key => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
  };
  exports.sortContainerQueries = function(theme, css) {
    if (!theme.containerQueries) {
      return css;
    }
    theme = Object.keys(css).filter(key => key.startsWith("@container")).sort((a, b) => {
      const regex = /min-width:\s*([0-9.]+)/;
      return +(a.match(regex)?.[1] || 0) - +(b.match(regex)?.[1] || 0);
    });
    return theme.length ? theme.reduce((acc, key) => {
      const value = css[key];
      delete acc[key];
      acc[key] = value;
      return acc;
    }, {...css}) : css;
  };
  global(require("module$node_modules$$mui$utils$formatMuiErrorMessage$index"));
};

//# sourceMappingURL=module$node_modules$$mui$system$cssContainerQueries$cssContainerQueries.js.map
