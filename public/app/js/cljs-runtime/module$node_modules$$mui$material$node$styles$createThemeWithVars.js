shadow$provide.module$node_modules$$mui$material$node$styles$createThemeWithVars = function(global, require, module, exports) {
  function assignNode(obj, keys) {
    keys.forEach(k => {
      obj[k] || (obj[k] = {});
    });
  }
  function setColor(obj, key, defaultValue) {
    !obj[key] && defaultValue && (obj[key] = defaultValue);
  }
  function toRgb(color) {
    return color && color.startsWith("hsl") ? (0,_colorManipulator.hslToRgb)(color) : color;
  }
  function setColorChannel(obj, key) {
    `${key}Channel` in obj || (obj[`${key}Channel`] = (0,_colorManipulator.private_safeColorChannel)(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` + "\n" + `To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`));
  }
  function getSpacingVal(spacingInput) {
    return "number" === typeof spacingInput ? `${spacingInput}px` : "string" === typeof spacingInput || "function" === typeof spacingInput || Array.isArray(spacingInput) ? spacingInput : "8px";
  }
  function attachColorScheme(colorSchemes, scheme, restTheme, colorScheme) {
    if (scheme) {
      scheme = !0 === scheme ? {} : scheme;
      var mode = "dark" === colorScheme ? "dark" : "light";
      if (restTheme) {
        var {palette, ...muiTheme} = (0,_createThemeNoVars.default)({...restTheme, palette:{mode, ...scheme?.palette}});
        colorSchemes[colorScheme] = {...scheme, palette, opacity:{...(0,_createColorScheme.getOpacity)(mode), ...scheme?.opacity}, overlays:scheme?.overlays || (0,_createColorScheme.getOverlays)(mode)};
        return muiTheme;
      }
      colorSchemes[colorScheme] = (0,_createColorScheme.default)({...scheme, palette:{mode, ...scheme?.palette}});
    }
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.createGetCssVar = void 0;
  exports.default = function(options = {}, ...args) {
    const {colorSchemes:colorSchemesInput = {light:!0}, defaultColorScheme:defaultColorSchemeInput, disableCssColorScheme = !1, cssVarPrefix = "mui", shouldSkipGeneratingVar = _shouldSkipGeneratingVar.default, colorSchemeSelector:selector = colorSchemesInput.light && colorSchemesInput.dark ? "media" : void 0, rootSelector = ":root", ...input} = options;
    options = Object.keys(colorSchemesInput)[0];
    options = defaultColorSchemeInput || (colorSchemesInput.light && "light" !== options ? "light" : options);
    const getCssVar = createGetCssVar(cssVarPrefix), {[options]:defaultSchemeInput, light:builtInLight, dark:builtInDark, ...customColorSchemes} = colorSchemesInput, colorSchemes = {...customColorSchemes};
    var defaultScheme = defaultSchemeInput;
    ("dark" !== options || "dark" in colorSchemesInput) && ("light" !== options || "light" in colorSchemesInput) || (defaultScheme = !0);
    if (!defaultScheme) {
      throw Error(`MUI: The \`colorSchemes.${options}\` option is either missing or invalid.`);
    }
    defaultScheme = attachColorScheme(colorSchemes, defaultScheme, input, options);
    builtInLight && !colorSchemes.light && attachColorScheme(colorSchemes, builtInLight, void 0, "light");
    builtInDark && !colorSchemes.dark && attachColorScheme(colorSchemes, builtInDark, void 0, "dark");
    let theme = {defaultColorScheme:options, ...defaultScheme, cssVarPrefix, colorSchemeSelector:selector, rootSelector, getCssVar, colorSchemes, font:{...(0,_cssVars.prepareTypographyVars)(defaultScheme.typography), ...defaultScheme.font}, spacing:getSpacingVal(input.spacing)};
    Object.keys(theme.colorSchemes).forEach(key => {
      const palette = theme.colorSchemes[key].palette;
      key = cssVar => {
        const tokens = cssVar.split("-");
        return getCssVar(cssVar, palette[tokens[1]][tokens[2]]);
      };
      "light" === palette.mode && (setColor(palette.common, "background", "#fff"), setColor(palette.common, "onBackground", "#000"));
      "dark" === palette.mode && (setColor(palette.common, "background", "#000"), setColor(palette.common, "onBackground", "#fff"));
      assignNode(palette, "Alert AppBar Avatar Button Chip FilledInput LinearProgress Skeleton Slider SnackbarContent SpeedDialAction StepConnector StepContent Switch TableCell Tooltip".split(" "));
      if ("light" === palette.mode) {
        setColor(palette.Alert, "errorColor", (0,_colorManipulator.private_safeDarken)(palette.error.light, 0.6));
        setColor(palette.Alert, "infoColor", (0,_colorManipulator.private_safeDarken)(palette.info.light, 0.6));
        setColor(palette.Alert, "successColor", (0,_colorManipulator.private_safeDarken)(palette.success.light, 0.6));
        setColor(palette.Alert, "warningColor", (0,_colorManipulator.private_safeDarken)(palette.warning.light, 0.6));
        setColor(palette.Alert, "errorFilledBg", key("palette-error-main"));
        setColor(palette.Alert, "infoFilledBg", key("palette-info-main"));
        setColor(palette.Alert, "successFilledBg", key("palette-success-main"));
        setColor(palette.Alert, "warningFilledBg", key("palette-warning-main"));
        setColor(palette.Alert, "errorFilledColor", silent(() => palette.getContrastText(palette.error.main)));
        setColor(palette.Alert, "infoFilledColor", silent(() => palette.getContrastText(palette.info.main)));
        setColor(palette.Alert, "successFilledColor", silent(() => palette.getContrastText(palette.success.main)));
        setColor(palette.Alert, "warningFilledColor", silent(() => palette.getContrastText(palette.warning.main)));
        setColor(palette.Alert, "errorStandardBg", (0,_colorManipulator.private_safeLighten)(palette.error.light, 0.9));
        setColor(palette.Alert, "infoStandardBg", (0,_colorManipulator.private_safeLighten)(palette.info.light, 0.9));
        setColor(palette.Alert, "successStandardBg", (0,_colorManipulator.private_safeLighten)(palette.success.light, 0.9));
        setColor(palette.Alert, "warningStandardBg", (0,_colorManipulator.private_safeLighten)(palette.warning.light, 0.9));
        setColor(palette.Alert, "errorIconColor", key("palette-error-main"));
        setColor(palette.Alert, "infoIconColor", key("palette-info-main"));
        setColor(palette.Alert, "successIconColor", key("palette-success-main"));
        setColor(palette.Alert, "warningIconColor", key("palette-warning-main"));
        setColor(palette.AppBar, "defaultBg", key("palette-grey-100"));
        setColor(palette.Avatar, "defaultBg", key("palette-grey-400"));
        setColor(palette.Button, "inheritContainedBg", key("palette-grey-300"));
        setColor(palette.Button, "inheritContainedHoverBg", key("palette-grey-A100"));
        setColor(palette.Chip, "defaultBorder", key("palette-grey-400"));
        setColor(palette.Chip, "defaultAvatarColor", key("palette-grey-700"));
        setColor(palette.Chip, "defaultIconColor", key("palette-grey-700"));
        setColor(palette.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
        setColor(palette.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
        setColor(palette.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
        setColor(palette.LinearProgress, "primaryBg", (0,_colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
        setColor(palette.LinearProgress, "secondaryBg", (0,_colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
        setColor(palette.LinearProgress, "errorBg", (0,_colorManipulator.private_safeLighten)(palette.error.main, 0.62));
        setColor(palette.LinearProgress, "infoBg", (0,_colorManipulator.private_safeLighten)(palette.info.main, 0.62));
        setColor(palette.LinearProgress, "successBg", (0,_colorManipulator.private_safeLighten)(palette.success.main, 0.62));
        setColor(palette.LinearProgress, "warningBg", (0,_colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
        setColor(palette.Skeleton, "bg", `rgba(${key("palette-text-primaryChannel")} / 0.11)`);
        setColor(palette.Slider, "primaryTrack", (0,_colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
        setColor(palette.Slider, "secondaryTrack", (0,_colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
        setColor(palette.Slider, "errorTrack", (0,_colorManipulator.private_safeLighten)(palette.error.main, 0.62));
        setColor(palette.Slider, "infoTrack", (0,_colorManipulator.private_safeLighten)(palette.info.main, 0.62));
        setColor(palette.Slider, "successTrack", (0,_colorManipulator.private_safeLighten)(palette.success.main, 0.62));
        setColor(palette.Slider, "warningTrack", (0,_colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
        const snackbarContentBackground = (0,_colorManipulator.private_safeEmphasize)(palette.background.default, 0.8);
        setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette.SnackbarContent, "color", silent(() => palette.getContrastText(snackbarContentBackground)));
        setColor(palette.SpeedDialAction, "fabHoverBg", (0,_colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
        setColor(palette.StepConnector, "border", key("palette-grey-400"));
        setColor(palette.StepContent, "border", key("palette-grey-400"));
        setColor(palette.Switch, "defaultColor", key("palette-common-white"));
        setColor(palette.Switch, "defaultDisabledColor", key("palette-grey-100"));
        setColor(palette.Switch, "primaryDisabledColor", (0,_colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
        setColor(palette.Switch, "secondaryDisabledColor", (0,_colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
        setColor(palette.Switch, "errorDisabledColor", (0,_colorManipulator.private_safeLighten)(palette.error.main, 0.62));
        setColor(palette.Switch, "infoDisabledColor", (0,_colorManipulator.private_safeLighten)(palette.info.main, 0.62));
        setColor(palette.Switch, "successDisabledColor", (0,_colorManipulator.private_safeLighten)(palette.success.main, 0.62));
        setColor(palette.Switch, "warningDisabledColor", (0,_colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
        setColor(palette.TableCell, "border", (0,_colorManipulator.private_safeLighten)((0,_colorManipulator.private_safeAlpha)(palette.divider, 1), 0.88));
        setColor(palette.Tooltip, "bg", (0,_colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
      }
      if ("dark" === palette.mode) {
        setColor(palette.Alert, "errorColor", (0,_colorManipulator.private_safeLighten)(palette.error.light, 0.6));
        setColor(palette.Alert, "infoColor", (0,_colorManipulator.private_safeLighten)(palette.info.light, 0.6));
        setColor(palette.Alert, "successColor", (0,_colorManipulator.private_safeLighten)(palette.success.light, 0.6));
        setColor(palette.Alert, "warningColor", (0,_colorManipulator.private_safeLighten)(palette.warning.light, 0.6));
        setColor(palette.Alert, "errorFilledBg", key("palette-error-dark"));
        setColor(palette.Alert, "infoFilledBg", key("palette-info-dark"));
        setColor(palette.Alert, "successFilledBg", key("palette-success-dark"));
        setColor(palette.Alert, "warningFilledBg", key("palette-warning-dark"));
        setColor(palette.Alert, "errorFilledColor", silent(() => palette.getContrastText(palette.error.dark)));
        setColor(palette.Alert, "infoFilledColor", silent(() => palette.getContrastText(palette.info.dark)));
        setColor(palette.Alert, "successFilledColor", silent(() => palette.getContrastText(palette.success.dark)));
        setColor(palette.Alert, "warningFilledColor", silent(() => palette.getContrastText(palette.warning.dark)));
        setColor(palette.Alert, "errorStandardBg", (0,_colorManipulator.private_safeDarken)(palette.error.light, 0.9));
        setColor(palette.Alert, "infoStandardBg", (0,_colorManipulator.private_safeDarken)(palette.info.light, 0.9));
        setColor(palette.Alert, "successStandardBg", (0,_colorManipulator.private_safeDarken)(palette.success.light, 0.9));
        setColor(palette.Alert, "warningStandardBg", (0,_colorManipulator.private_safeDarken)(palette.warning.light, 0.9));
        setColor(palette.Alert, "errorIconColor", key("palette-error-main"));
        setColor(palette.Alert, "infoIconColor", key("palette-info-main"));
        setColor(palette.Alert, "successIconColor", key("palette-success-main"));
        setColor(palette.Alert, "warningIconColor", key("palette-warning-main"));
        setColor(palette.AppBar, "defaultBg", key("palette-grey-900"));
        setColor(palette.AppBar, "darkBg", key("palette-background-paper"));
        setColor(palette.AppBar, "darkColor", key("palette-text-primary"));
        setColor(palette.Avatar, "defaultBg", key("palette-grey-600"));
        setColor(palette.Button, "inheritContainedBg", key("palette-grey-800"));
        setColor(palette.Button, "inheritContainedHoverBg", key("palette-grey-700"));
        setColor(palette.Chip, "defaultBorder", key("palette-grey-700"));
        setColor(palette.Chip, "defaultAvatarColor", key("palette-grey-300"));
        setColor(palette.Chip, "defaultIconColor", key("palette-grey-300"));
        setColor(palette.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
        setColor(palette.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
        setColor(palette.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
        setColor(palette.LinearProgress, "primaryBg", (0,_colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
        setColor(palette.LinearProgress, "secondaryBg", (0,_colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
        setColor(palette.LinearProgress, "errorBg", (0,_colorManipulator.private_safeDarken)(palette.error.main, 0.5));
        setColor(palette.LinearProgress, "infoBg", (0,_colorManipulator.private_safeDarken)(palette.info.main, 0.5));
        setColor(palette.LinearProgress, "successBg", (0,_colorManipulator.private_safeDarken)(palette.success.main, 0.5));
        setColor(palette.LinearProgress, "warningBg", (0,_colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
        setColor(palette.Skeleton, "bg", `rgba(${key("palette-text-primaryChannel")} / 0.13)`);
        setColor(palette.Slider, "primaryTrack", (0,_colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
        setColor(palette.Slider, "secondaryTrack", (0,_colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
        setColor(palette.Slider, "errorTrack", (0,_colorManipulator.private_safeDarken)(palette.error.main, 0.5));
        setColor(palette.Slider, "infoTrack", (0,_colorManipulator.private_safeDarken)(palette.info.main, 0.5));
        setColor(palette.Slider, "successTrack", (0,_colorManipulator.private_safeDarken)(palette.success.main, 0.5));
        setColor(palette.Slider, "warningTrack", (0,_colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
        const snackbarContentBackground = (0,_colorManipulator.private_safeEmphasize)(palette.background.default, 0.98);
        setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette.SnackbarContent, "color", silent(() => palette.getContrastText(snackbarContentBackground)));
        setColor(palette.SpeedDialAction, "fabHoverBg", (0,_colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
        setColor(palette.StepConnector, "border", key("palette-grey-600"));
        setColor(palette.StepContent, "border", key("palette-grey-600"));
        setColor(palette.Switch, "defaultColor", key("palette-grey-300"));
        setColor(palette.Switch, "defaultDisabledColor", key("palette-grey-600"));
        setColor(palette.Switch, "primaryDisabledColor", (0,_colorManipulator.private_safeDarken)(palette.primary.main, 0.55));
        setColor(palette.Switch, "secondaryDisabledColor", (0,_colorManipulator.private_safeDarken)(palette.secondary.main, 0.55));
        setColor(palette.Switch, "errorDisabledColor", (0,_colorManipulator.private_safeDarken)(palette.error.main, 0.55));
        setColor(palette.Switch, "infoDisabledColor", (0,_colorManipulator.private_safeDarken)(palette.info.main, 0.55));
        setColor(palette.Switch, "successDisabledColor", (0,_colorManipulator.private_safeDarken)(palette.success.main, 0.55));
        setColor(palette.Switch, "warningDisabledColor", (0,_colorManipulator.private_safeDarken)(palette.warning.main, 0.55));
        setColor(palette.TableCell, "border", (0,_colorManipulator.private_safeDarken)((0,_colorManipulator.private_safeAlpha)(palette.divider, 1), 0.68));
        setColor(palette.Tooltip, "bg", (0,_colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
      }
      setColorChannel(palette.background, "default");
      setColorChannel(palette.background, "paper");
      setColorChannel(palette.common, "background");
      setColorChannel(palette.common, "onBackground");
      setColorChannel(palette, "divider");
      Object.keys(palette).forEach(color => {
        const colors = palette[color];
        colors && "object" === typeof colors && (colors.main && setColor(palette[color], "mainChannel", (0,_colorManipulator.private_safeColorChannel)(toRgb(colors.main))), colors.light && setColor(palette[color], "lightChannel", (0,_colorManipulator.private_safeColorChannel)(toRgb(colors.light))), colors.dark && setColor(palette[color], "darkChannel", (0,_colorManipulator.private_safeColorChannel)(toRgb(colors.dark))), colors.contrastText && setColor(palette[color], "contrastTextChannel", (0,_colorManipulator.private_safeColorChannel)(toRgb(colors.contrastText))), 
        "text" === color && (setColorChannel(palette[color], "primary"), setColorChannel(palette[color], "secondary")), "action" === color && (colors.active && setColorChannel(palette[color], "active"), colors.selected && setColorChannel(palette[color], "selected")));
      });
    });
    theme = args.reduce((acc, argument) => (0,_deepmerge.default)(acc, argument), theme);
    args = {prefix:cssVarPrefix, disableCssColorScheme, shouldSkipGeneratingVar, getSelector:(0,_createGetSelector.default)(theme)};
    const {vars, generateThemeVars, generateStyleSheets} = (0,_cssVars.prepareCssVars)(theme, args);
    theme.vars = vars;
    Object.entries(theme.colorSchemes[theme.defaultColorScheme]).forEach(([key, value]) => {
      theme[key] = value;
    });
    theme.generateThemeVars = generateThemeVars;
    theme.generateStyleSheets = generateStyleSheets;
    theme.generateSpacing = function() {
      return (0,_system.createSpacing)(input.spacing, (0,_spacing.createUnarySpacing)(this));
    };
    theme.getColorSchemeSelector = (0,_cssVars.createGetColorSchemeSelector)(selector);
    theme.spacing = theme.generateSpacing();
    theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
    theme.unstable_sxConfig = {..._styleFunctionSx.unstable_defaultSxConfig, ...input?.unstable_sxConfig};
    theme.unstable_sx = function(props) {
      return (0,_styleFunctionSx.default)({sx:props, theme:this});
    };
    theme.toRuntimeSource = _stringifyTheme.stringifyTheme;
    return theme;
  };
  module(require("module$node_modules$$mui$utils$formatMuiErrorMessage$index"));
  var _deepmerge = module(require("module$node_modules$$mui$utils$deepmerge$index")), _system = require("module$node_modules$$mui$system$index"), _spacing = require("module$node_modules$$mui$system$spacing$index"), _cssVars = require("module$node_modules$$mui$system$cssVars$index"), _styleFunctionSx = global(require("module$node_modules$$mui$system$styleFunctionSx$index")), _colorManipulator = require("module$node_modules$$mui$system$colorManipulator$index"), _createThemeNoVars = module(require("module$node_modules$$mui$material$node$styles$createThemeNoVars")), 
  _createColorScheme = global(require("module$node_modules$$mui$material$node$styles$createColorScheme")), _shouldSkipGeneratingVar = module(require("module$node_modules$$mui$material$node$styles$shouldSkipGeneratingVar")), _createGetSelector = module(require("module$node_modules$$mui$material$node$styles$createGetSelector")), _stringifyTheme = require("module$node_modules$$mui$material$node$styles$stringifyTheme");
  const silent = fn => {
    try {
      return fn();
    } catch (error) {
    }
  }, createGetCssVar = (cssVarPrefix = "mui") => (0,_system.unstable_createGetCssVar)(cssVarPrefix);
  exports.createGetCssVar = createGetCssVar;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$styles$createThemeWithVars.js.map
