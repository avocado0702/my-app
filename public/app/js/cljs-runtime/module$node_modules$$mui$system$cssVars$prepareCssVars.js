shadow$provide.module$node_modules$$mui$system$cssVars$prepareCssVars = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var _deepmerge = global(require("module$node_modules$$mui$utils$deepmerge$index")), _cssVarsParser = global(require("module$node_modules$$mui$system$cssVars$cssVarsParser"));
  exports.default = function(theme, parserConfig = {}) {
    function defaultGetSelector(colorScheme, cssObject) {
      let rule = selector;
      "class" === selector && (rule = ".%s");
      "data" === selector && (rule = "[data-%s]");
      selector?.startsWith("data-") && !selector.includes("%s") && (rule = `[${selector}="%s"]`);
      if (colorScheme) {
        if ("media" === rule) {
          return theme.defaultColorScheme === colorScheme ? ":root" : {[`@media (prefers-color-scheme: ${colorSchemes[colorScheme]?.palette?.mode || colorScheme})`]:{":root":cssObject}};
        }
        if (rule) {
          return theme.defaultColorScheme === colorScheme ? `:root, ${rule.replace("%s", String(colorScheme))}` : rule.replace("%s", String(colorScheme));
        }
      }
      return ":root";
    }
    const {getSelector = defaultGetSelector, disableCssColorScheme, colorSchemeSelector:selector} = parserConfig, {colorSchemes = {}, components, defaultColorScheme = "light", ...otherTheme} = theme, {vars:rootVars, css:rootCss, varsWithDefaults:rootVarsWithDefaults} = (0,_cssVarsParser.default)(otherTheme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {}, {[defaultColorScheme]:defaultScheme, ...otherColorSchemes} = colorSchemes;
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
      const {vars, css, varsWithDefaults} = (0,_cssVarsParser.default)(scheme, parserConfig);
      themeVars = (0,_deepmerge.default)(themeVars, varsWithDefaults);
      colorSchemesMap[key] = {css, vars};
    });
    if (defaultScheme) {
      const {css, vars, varsWithDefaults} = (0,_cssVarsParser.default)(defaultScheme, parserConfig);
      themeVars = (0,_deepmerge.default)(themeVars, varsWithDefaults);
      colorSchemesMap[defaultColorScheme] = {css, vars};
    }
    return {vars:themeVars, generateThemeVars:() => {
      let vars = {...rootVars};
      Object.entries(colorSchemesMap).forEach(([, {vars:schemeVars}]) => {
        vars = (0,_deepmerge.default)(vars, schemeVars);
      });
      return vars;
    }, generateStyleSheets:() => {
      function insertStyleSheet(key, css) {
        Object.keys(css).length && stylesheets.push("string" === typeof key ? {[key]:{...css}} : key);
      }
      const stylesheets = [], colorScheme = theme.defaultColorScheme || "light";
      insertStyleSheet(getSelector(void 0, {...rootCss}), rootCss);
      const {[colorScheme]:defaultSchemeVal, ...other} = colorSchemesMap;
      if (defaultSchemeVal) {
        var {css} = defaultSchemeVal;
        const cssColorSheme = colorSchemes[colorScheme]?.palette?.mode;
        css = !disableCssColorScheme && cssColorSheme ? {colorScheme:cssColorSheme, ...css} : {...css};
        insertStyleSheet(getSelector(colorScheme, {...css}), css);
      }
      Object.entries(other).forEach(([key, {css}]) => {
        const cssColorSheme = colorSchemes[key]?.palette?.mode;
        css = !disableCssColorScheme && cssColorSheme ? {colorScheme:cssColorSheme, ...css} : {...css};
        insertStyleSheet(getSelector(key, {...css}), css);
      });
      return stylesheets;
    }};
  };
};

//# sourceMappingURL=module$node_modules$$mui$system$cssVars$prepareCssVars.js.map
