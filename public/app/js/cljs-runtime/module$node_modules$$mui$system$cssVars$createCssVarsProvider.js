shadow$provide.module$node_modules$$mui$system$cssVars$createCssVarsProvider = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.DISABLE_CSS_TRANSITION = void 0;
  exports.default = function(options) {
    function CssVarsProvider(props) {
      const {children, theme:themeProp, modeStorageKey = defaultModeStorageKey, colorSchemeStorageKey = defaultColorSchemeStorageKey, disableTransitionOnChange = designSystemTransitionOnChange, storageWindow = "undefined" === typeof window ? void 0 : window, documentNode = "undefined" === typeof document ? void 0 : document, colorSchemeNode = "undefined" === typeof document ? void 0 : document.documentElement, disableNestedContext = !1, disableStyleSheetGeneration = !1, defaultMode:initialMode = 
      "system"} = props, hasMounted = React.useRef(!1);
      var upperTheme = (0,_privateTheming.useTheme)(), ctx = React.useContext(ColorSchemeContext);
      props = !!ctx && !disableNestedContext;
      var initialTheme = React.useMemo(() => themeProp ? themeProp : "function" === typeof defaultTheme ? defaultTheme() : defaultTheme, [themeProp]);
      const scopedTheme = initialTheme[themeId], {colorSchemes = {}, components = {}, cssVarPrefix, ...restThemeProp} = scopedTheme || initialTheme, joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(","), allColorSchemes = React.useMemo(() => joinedColorSchemes.split(","), [joinedColorSchemes]);
      initialTheme = "string" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.light;
      const defaultDarkColorScheme = "string" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.dark, {mode:stateMode, setMode, systemMode, lightColorScheme, darkColorScheme, colorScheme:stateColorScheme, setColorScheme} = (0,_useCurrentColorScheme.default)({supportedColorSchemes:allColorSchemes, defaultLightColorScheme:initialTheme, defaultDarkColorScheme, modeStorageKey, colorSchemeStorageKey, defaultMode:colorSchemes[initialTheme] && colorSchemes[defaultDarkColorScheme] ? 
      initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode, storageWindow});
      let mode = stateMode, colorScheme = stateColorScheme;
      props && (mode = ctx.mode, colorScheme = ctx.colorScheme);
      ctx = colorScheme || restThemeProp.defaultColorScheme;
      initialTheme = restThemeProp.generateThemeVars?.() || restThemeProp.vars;
      const theme = {...restThemeProp, components, colorSchemes, cssVarPrefix, vars:initialTheme};
      "function" === typeof theme.generateSpacing && (theme.spacing = theme.generateSpacing());
      if (ctx) {
        const scheme = colorSchemes[ctx];
        scheme && "object" === typeof scheme && Object.keys(scheme).forEach(schemeKey => {
          theme[schemeKey] = scheme[schemeKey] && "object" === typeof scheme[schemeKey] ? {...theme[schemeKey], ...scheme[schemeKey]} : scheme[schemeKey];
        });
      }
      const colorSchemeSelector = restThemeProp.colorSchemeSelector;
      React.useEffect(() => {
        if (colorScheme && colorSchemeNode && colorSchemeSelector && "media" !== colorSchemeSelector) {
          let rule = colorSchemeSelector;
          "class" === colorSchemeSelector && (rule = ".%s");
          "data" === colorSchemeSelector && (rule = "[data-%s]");
          colorSchemeSelector?.startsWith("data-") && !colorSchemeSelector.includes("%s") && (rule = `[${colorSchemeSelector}="%s"]`);
          if (rule.startsWith(".")) {
            colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace("%s", scheme))), colorSchemeNode.classList.add(rule.substring(1).replace("%s", colorScheme));
          } else {
            const matches = rule.replace("%s", colorScheme).match(/\[([^\]]+)\]/);
            if (matches) {
              const [attr, value] = matches[1].split("\x3d");
              value || allColorSchemes.forEach(scheme => {
                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));
              });
              colorSchemeNode.setAttribute(attr, value ? value.replace(/"|'/g, "") : "");
            } else {
              colorSchemeNode.setAttribute(rule, colorScheme);
            }
          }
        }
      }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);
      React.useEffect(() => {
        let timer;
        if (disableTransitionOnChange && hasMounted.current && documentNode) {
          const css = documentNode.createElement("style");
          css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
          documentNode.head.appendChild(css);
          window.getComputedStyle(documentNode.body);
          timer = setTimeout(() => {
            documentNode.head.removeChild(css);
          }, 1);
        }
        return () => {
          clearTimeout(timer);
        };
      }, [colorScheme, disableTransitionOnChange, documentNode]);
      React.useEffect(() => {
        hasMounted.current = !0;
        return () => {
          hasMounted.current = !1;
        };
      }, []);
      ctx = React.useMemo(() => ({allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode}), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
      initialTheme = !0;
      if (disableStyleSheetGeneration || !1 === restThemeProp.cssVariables || props && upperTheme?.cssVarPrefix === cssVarPrefix) {
        initialTheme = !1;
      }
      upperTheme = (0,_jsxRuntime.jsxs)(React.Fragment, {children:[(0,_jsxRuntime.jsx)(_ThemeProvider.default, {themeId:scopedTheme ? themeId : void 0, theme:resolveTheme ? resolveTheme(theme) : theme, children}), initialTheme && (0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:theme.generateStyleSheets?.() || []})]});
      return props ? upperTheme : (0,_jsxRuntime.jsx)(ColorSchemeContext.Provider, {value:ctx, children:upperTheme});
    }
    const {themeId, theme:defaultTheme = {}, modeStorageKey:defaultModeStorageKey = _InitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey:defaultColorSchemeStorageKey = _InitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY, disableTransitionOnChange:designSystemTransitionOnChange = !1, defaultColorScheme, resolveTheme} = options, defaultContext = {allColorSchemes:[], colorScheme:void 0, darkColorScheme:void 0, lightColorScheme:void 0, mode:void 0, setColorScheme:() => {
    }, setMode:() => {
    }, systemMode:void 0}, ColorSchemeContext = React.createContext(void 0);
    ColorSchemeContext.displayName = "ColorSchemeContext";
    CssVarsProvider.propTypes = {children:_propTypes.default.node, colorSchemeNode:_propTypes.default.any, colorSchemeStorageKey:_propTypes.default.string, defaultMode:_propTypes.default.string, disableNestedContext:_propTypes.default.bool, disableStyleSheetGeneration:_propTypes.default.bool, disableTransitionOnChange:_propTypes.default.bool, documentNode:_propTypes.default.any, modeStorageKey:_propTypes.default.string, storageWindow:_propTypes.default.any, theme:_propTypes.default.object};
    const defaultLightColorScheme = "string" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.light, defaultDarkColorScheme = "string" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.dark;
    return {CssVarsProvider, useColorScheme:() => React.useContext(ColorSchemeContext) || defaultContext, getInitColorSchemeScript:params => (0,_InitColorSchemeScript.default)({colorSchemeStorageKey:defaultColorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme, modeStorageKey:defaultModeStorageKey, ...params})};
  };
  var React = module(require("module$node_modules$react$index")), _propTypes = global(require("module$node_modules$prop_types$index")), _styledEngine = require("module$node_modules$$mui$styled_engine$node$index"), _privateTheming = require("module$node_modules$$mui$private_theming$node$index"), _ThemeProvider = global(require("module$node_modules$$mui$system$ThemeProvider$index")), _InitColorSchemeScript = module(require("module$node_modules$$mui$system$InitColorSchemeScript$InitColorSchemeScript")), 
  _useCurrentColorScheme = global(require("module$node_modules$$mui$system$cssVars$useCurrentColorScheme")), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const DISABLE_CSS_TRANSITION = exports.DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
};

//# sourceMappingURL=module$node_modules$$mui$system$cssVars$createCssVarsProvider.js.map
