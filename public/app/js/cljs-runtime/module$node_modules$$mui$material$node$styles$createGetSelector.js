shadow$provide.module$node_modules$$mui$material$node$styles$createGetSelector = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var _excludeVariablesFromRoot = global(require("module$node_modules$$mui$material$node$styles$excludeVariablesFromRoot"));
  exports.default = theme => (colorScheme, css) => {
    const root = theme.rootSelector || ":root", selector = theme.colorSchemeSelector;
    let rule = selector;
    "class" === selector && (rule = ".%s");
    "data" === selector && (rule = "[data-%s]");
    selector?.startsWith("data-") && !selector.includes("%s") && (rule = `[${selector}="%s"]`);
    if (theme.defaultColorScheme === colorScheme) {
      if ("dark" === colorScheme) {
        const excludedVariables = {};
        (0,_excludeVariablesFromRoot.default)(theme.cssVarPrefix).forEach(cssVar => {
          excludedVariables[cssVar] = css[cssVar];
          delete css[cssVar];
        });
        return "media" === rule ? {[root]:css, ["@media (prefers-color-scheme: dark)"]:{[root]:excludedVariables}} : rule ? {[rule.replace("%s", colorScheme)]:excludedVariables, [`${root}, ${rule.replace("%s", colorScheme)}`]:css} : {[root]:{...css, ...excludedVariables}};
      }
      if (rule && "media" !== rule) {
        return `${root}, ${rule.replace("%s", String(colorScheme))}`;
      }
    } else if (colorScheme) {
      if ("media" === rule) {
        return {[`@media (prefers-color-scheme: ${String(colorScheme)})`]:{[root]:css}};
      }
      if (rule) {
        return rule.replace("%s", String(colorScheme));
      }
    }
    return root;
  };
};

//# sourceMappingURL=module$node_modules$$mui$material$node$styles$createGetSelector.js.map
