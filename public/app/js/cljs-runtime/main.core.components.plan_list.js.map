{"version":3,"sources":["main/core/components/plan_list.cljs"],"mappings":";AAIA,yCAAA,zCAAMA;AAAN,AAAA,0FAAA,yDAAA,2CAAA,6DAAA;AAAA,AACuB,8BAAA,mFAAA,1GAACC;WADxB;;AAGA,4CAAA,5CAAMC,gGAAYC;AAAlB,AAAA,0FAAA,yDAAA,2CAAA,6DAAA;AAAA,AACuB,8BAAA,mFAAA,1GAACF,8KAAgCE;WADxD;;AAGA,8CAAA,9CAAMC,oGAAcC,KAAKC;AAAzB,AACE,IAAMC,cAAY,AAACC,gDAAO,AAAA,qFAAQH;AAAlC,AACE;AAAA,AAAA,0FAAA,6EAAA,2CAAA,6DAAA;AAAA,AAEe,AAAI,AAACI,sBAAOH,cAAcD;;AACtB,mBAAA,ZAACK,yBAA4BJ;WAHhD,mFAAA,4FAAA,mFAAA,2LAAA,mFAAA,6FAAA,nRAK4B,AAAA,qFAAQD,iRAE9BH,0CAAW,AAAA,gFAAKG;;;AAE1B,2CAAA,3CAAMM,8FAAWL;AAAjB,AACE,IAAMM,KAAG,sDAAA,mFAAA,zIAACC;AAAV,AACE;AAAA,AAAA,0FAAA,sEAAA,mFAAA,iDAAA,eAAA,mFAEwBb,uDACrB,+CAAA,mFAAA,iDAAA,jLAAI,uBAAA,AAAAc,vBAACC,uCAAQH,qKAEX,iBAAAI,qBAAA,iEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAy7E0C,AAAA+B,sBAAApC;IAz7E1CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAAMtB;AAAN,AAAA,AAAA,AAAAwB,uBAAAJ,SAAA,oBAAA,0JAAA,2CAAA,oDACS,AAAA,gFAAKpB,tPACXD,4CAAaC,KAAKC;;AAFrB,eAAA,CAAAqB,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,uDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAjB,vBAAMZ;AAAN,AAAA,OAAA8B,eAAA,oBAAA,0JAAA,2CAAA,mJAAA,AAAAH,uDAAA,AAAAI,eAAAnB,rKACS,AAAA,gFAAKZ,tPACXD,4CAAaC,KAAKC;;;AAFrB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAU,mBAAA,AAAAF,gBAAYF;;;;AAIrB,yDAAA,zDAACyB,6HAEC,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;cAAT,AAAAF,4CAAAD,WAAA,IAAA,rEAAWpC;AAAX,AACE,YAAA,ZAACO;;AACD,YAAA,ZAACA,+BAAkCP;;AACnC,yDAAA,lDAACwC,+CAAOF,iEAAc,WAAKG;AAAL,AAAY,sDAAA,WAAAC,1DAACC;AAAD,AAAS,OAACC,6CAAE,AAAA,gFAAAF,kBAAQ1C;GAASyC;;;AAGnE,yDAAA,zDAACP,qHAEC,WAAKI;AAAL,AACE,YAAA,ZAAC/B;;AACD,IAAMsC,SAAO,2HAAA,zHAAI,AAACjC,uBAAO,AAAA,4FAAY0B,UAEtB,gQAAA,/PAAK,AAACQ,+CAAOC,cAAI,4CAAA,5CAACC,8FAAQ,AAAA,4FAAYV;AAFrD,AAIE,yDAAA,6EAAA,2CAAA,yDAAA,uDAAA,WAAA,sDAAA,3VAACE,+CAAOF,iEAAcW,4GAAUJ","names":["main.core.components.plan-list/add-btn","re-frame.core/dispatch","main.core.components.plan-list/delete-btn","item-id","main.core.components.plan-list/list-element","item","selected-item","input-value","reagent.core.atom","cljs.core/reset!","js/console.log","main.core.components.plan-list/plan-list","pl","re_frame.core.subscribe","cljs.core/deref","cljs.core/empty?","iter__5480__auto__","s__12945","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__12947","cljs.core/chunk-buffer","i__12946","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12944","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","re_frame.core.reg_event_db","p__12949","vec__12950","cljs.core.nth","db","_","cljs.core.update","items","p1__12948#","cljs.core.remove","cljs.core._EQ_","new-id","cljs.core.reduce","cljs.core/max","cljs.core.map","cljs.core/conj","cljs.core/chunk-first"],"sourcesContent":["(ns main.core.components.plan-list\r\n  (:require [reagent.core :as r]\r\n            [re-frame.core :as re-frame]))\r\n\r\n(defn add-btn []\r\n  [:button {:on-click #(re-frame/dispatch [:add-item])} \"+\"])\r\n\r\n(defn delete-btn [item-id]\r\n  [:button {:on-click #(re-frame/dispatch [:delete-item item-id])} \"-\"])\r\n\r\n(defn list-element [item selected-item]\r\n  (let [input-value (r/atom (:titel item))]\r\n    (fn []\r\n      [:div.list-element\r\n       {:on-click #(do (reset! selected-item item)\r\n                       (js/console.log \"This item:\" selected-item))}\r\n       [:div.list-element-header\r\n        [:h4.list-element-title (:titel item)]\r\n        [:div.list-element-buttons\r\n         [delete-btn (:id item)]]]])))\r\n\r\n(defn plan-list [selected-item]\r\n  (let [pl (re-frame/subscribe [:get-plan-list])]\r\n    (fn []\r\n      [:div.plan-list\r\n       [:h2 \"Current Plan\" [add-btn]]\r\n       (if (empty? @pl)\r\n         [:h3 \"You have no plan\"]\r\n         (for [item @pl]\r\n           ^{:key (:id item)}\r\n           [list-element item selected-item]))])))\r\n\r\n(re-frame/reg-event-db\r\n  :delete-item\r\n  (fn [db [_ item-id]]\r\n    (js/console.log \"Deleting a item:\")\r\n    (js/console.log \"Deleted item id:\" item-id)\r\n    (update db :plan-list (fn [items] (remove #(= (:id %) item-id) items)))))\r\n\r\n\r\n(re-frame/reg-event-db\r\n  :add-item\r\n  (fn [db]\r\n    (js/console.log \"Adding a new item\")\r\n    (let [new-id (if (empty? (:plan-list db)) ;; \u68c0\u67e5 `:plan-list` \u662f\u5426\u4e3a\u7a7a\r\n                   1\r\n                   (inc (reduce max (map :id (:plan-list db))))\r\n                   )] ;; \u5982\u679c\u4e3a\u7a7a\uff0c`new-id` \u4ece 1 \u5f00\u59cb\r\n      (update db :plan-list conj {:id new-id, :titel \"new plan\", :text \"new plan introduction\"}))))"]}