{"version":3,"sources":["main/core/components/plan_list.cljs"],"mappings":";;AAIA,yCAAA,zCAAMA;AAAN,AAAA,0FAAA,wGAAA,2CAAA,gEAAA,MAAA,qDAAA,SAAA,2DAAA,WAAA,iDAAA,wCAAA,uDAAA,gEAAA,uDAAA,0DAAA,8DAAA,4DAAA,gEAAA,2EAAA,gEAAA,2DAAA,UAAA,MAAA,OAAA,IAAA,WAAA,OAAA,OAAA,QAAA,QAAA,SAAA,4DAAA,xnCAEMC;AAFN,AAgBc,8BAAA,mFAAA,1GAACC;WAhBf;;AAkBA,4CAAA,5CAAMC,gGAAYC;AAAlB,AAAA,0FAAA,yDAAA,2CAAA,6DAAA;AAAA,AACuB,8BAAA,mFAAA,1GAACF,8KAAgCE;WADxD;;AAGA,8CAAA,9CAAMC,oGACHC;AADH,AAEE,IAAMC,OAAK,sDAAA,mFAAA,zIAACC,iNAAoC,AAAA,gFAAKF;IAC/CG,kBAAgB,sDAAA,mFAAA,zIAACD;AADvB,AAGE;AAAA,AAAA,0FAAA,6EAAA,2CAAA,kPAAA,6DAAA,vPACgB,wKAAA,AAAA,YAAA,lLAAM,mIAAA,AAAAE,nIAACC,6CAAE,AAAA,gFAAKL,sBAAOG;AADrC,AAEoB,AAAI,uBAAA,mFAAA,1GAACP,8LACmB,AAAA,gFAAKI;;AACzB,mBAAA,ZAACM,4BAA+B,AAAA,gFAAKN;WAJ7D,mFAAA,4FAAA,mFAAA,4MAAA,mFAAA,6FAAA,pSAK0D,AAAA,qFAAA,AAAAI,gBAASH,kRAC9BJ,0CAAW,AAAA,gFAAKG;;;AAGzD,2CAAA,3CAAMO;AAAN,AAEE,IAAMC,KAAG,sDAAA,mFAAA,zIAACN;AAAV,AACE;AAAA,AAAA,0FAAA,sEAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,gEAAA,yBAAA,mFAAA,8CAAA,uBAAA,mFAE8BR,uDACtB,+CAAA,mFAAA,iDAAA,jLAAI,uBAAA,AAAAU,vBAACK,uCAAQD,qKAEX,iBAAAE,qBAAA,iEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAs6EqC,AAAAe,sBAAApB;IAt6ErCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAAMrB;AAAN,AAAA,AAAA,AAAAuB,uBAAAJ,SAAA,oBAAA,4IAAA,2CAAA,oDAAuB,AAAA,gFAAKnB,xOAAQD,4CAAaC;;AAAjD,eAAA,CAAAqB,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,uDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAjB,vBAAMX;AAAN,AAAA,OAAA6B,eAAA,oBAAA,4IAAA,2CAAA,mJAAA,AAAAH,uDAAA,AAAAI,eAAAnB,rKAAuB,AAAA,gFAAKX,xOAAQD,4CAAaC;;;AAAjD;;;;GAAA,KAAA;;AAAA,AAAA,OAAAU,mBAAA,AAAAN,gBAAYI","names":["main.core.components.plan-list/add-btn","js/module$node_modules$$mui$material$node$Fab$index.default","re-frame.core/dispatch","main.core.components.plan-list/delete-btn","item-id","main.core.components.plan-list/list-element","item","plan","re_frame.core.subscribe","current-plan-id","cljs.core/deref","cljs.core._EQ_","js/console.log","main.core.components.plan-list/plan-list","pl","cljs.core/empty?","iter__5480__auto__","s__27061","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__27063","cljs.core/chunk-buffer","i__27062","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27060","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/chunk-first"],"sourcesContent":["(ns main.core.components.plan-list\r\n  (:require [\"@mui/material/Fab\" :default Fab]\r\n            [re-frame.core :as re-frame]))\r\n\r\n(defn add-btn\r\n  []\r\n  [:> Fab\r\n   {:aria-label \"add\",\r\n    :size \"medium\",\r\n    :variant \"outlined\",\r\n    :sx {:width \"26px\",\r\n         :backgroundColor \"white\",\r\n         :color \"#1877f2\",\r\n         :height \"26px\",\r\n         :margin-top \"2px\",\r\n         :minHeight \"unset\",\r\n         :fontSize \"20px\",\r\n         :position \"relative\",\r\n         :zIndex 0,\r\n         :boxShadow \"none\"},\r\n    :onClick #(re-frame/dispatch [:add-item])} \"+\"])\r\n\r\n(defn delete-btn [item-id]\r\n  [:button {:on-click #(re-frame/dispatch [:delete-item item-id])} \"-\"])\r\n\r\n(defn list-element\r\n  [item]\r\n  (let [plan (re-frame/subscribe [:get-plan-by-id (:id item)])\r\n        current-plan-id (re-frame/subscribe [:get-selected-plan-id])]\r\n        \r\n    (fn [] [:div.list-element\r\n            {:class (when (= (:id item) @current-plan-id) \"highlight\"),\r\n             :on-click #(do (re-frame/dispatch [:set-selected-plan-id\r\n                                                (:id item)])\r\n                            (js/console.log \"This item id:\" (:id item)))}\r\n            [:div.list-element-header [:h4.list-element-title (:titel @plan)]\r\n             [:div.list-element-buttons [delete-btn (:id item)]]]])))\r\n\r\n\r\n(defn plan-list\r\n  []\r\n  (let [pl (re-frame/subscribe [:get-plan-list])]\r\n    (fn [] [:div.plan-list\r\n            [:div {:style {:display \"flex\", :alignItems \"center\"}} \r\n             [:p \"Current Plan\"] [add-btn]] \r\n            (if (empty? @pl)\r\n              [:h3 \"You have no plan\"]\r\n              (for [item @pl] ^{:key (:id item)} [list-element item]))])))"]}