shadow$provide.module$node_modules$$mui$material$node$internal$SwitchBase = function(global, require, module, exports) {
  "use client";
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var React = global(require("module$node_modules$react$index"));
  global = _interopRequireDefault(require("module$node_modules$prop_types$index"));
  var _clsx = _interopRequireDefault(require("module$node_modules$clsx$dist$clsx"));
  module = _interopRequireDefault(require("module$node_modules$$mui$utils$refType$index"));
  var _composeClasses = _interopRequireDefault(require("module$node_modules$$mui$utils$composeClasses$index")), _capitalize = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$capitalize")), _rootShouldForwardProp = _interopRequireDefault(require("module$node_modules$$mui$material$node$styles$rootShouldForwardProp")), _zeroStyled = require("module$node_modules$$mui$material$node$zero_styled$index"), _useControlled = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$useControlled")), 
  _useFormControl = _interopRequireDefault(require("module$node_modules$$mui$material$node$FormControl$useFormControl"));
  _interopRequireDefault = _interopRequireDefault(require("module$node_modules$$mui$material$node$ButtonBase$index"));
  var _switchBaseClasses = require("module$node_modules$$mui$material$node$internal$switchBaseClasses"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const useUtilityClasses = ownerState => {
    const {classes, checked, disabled, edge} = ownerState;
    ownerState = {root:["root", checked && "checked", disabled && "disabled", edge && `edge${(0,_capitalize.default)(edge)}`], input:["input"]};
    return (0,_composeClasses.default)(ownerState, _switchBaseClasses.getSwitchBaseUtilityClass, classes);
  }, SwitchBaseRoot = (0,_zeroStyled.styled)(_interopRequireDefault.default)({padding:9, borderRadius:"50%", variants:[{props:{edge:"start", size:"small"}, style:{marginLeft:-3}}, {props:({edge, ownerState}) => "start" === edge && "small" !== ownerState.size, style:{marginLeft:-12}}, {props:{edge:"end", size:"small"}, style:{marginRight:-3}}, {props:({edge, ownerState}) => "end" === edge && "small" !== ownerState.size, style:{marginRight:-12}}]}), SwitchBaseInput = (0,_zeroStyled.styled)("input", 
  {shouldForwardProp:_rootShouldForwardProp.default})({cursor:"inherit", position:"absolute", opacity:0, width:"100%", height:"100%", top:0, left:0, margin:0, padding:0, zIndex:1});
  require = React.forwardRef(function(props, ref) {
    const {autoFocus, checked:checkedProp, checkedIcon, className, defaultChecked, disabled:disabledProp, disableFocusRipple = !1, edge = !1, icon, id, inputProps, inputRef, name, onBlur, onChange, onFocus, readOnly, required = !1, tabIndex, type, value, ...other} = props, [checked, setCheckedState] = (0,_useControlled.default)({controlled:checkedProp, default:!!defaultChecked, name:"SwitchBase", state:"checked"}), muiFormControl = (0,_useFormControl.default)();
    let disabled = disabledProp;
    muiFormControl && "undefined" === typeof disabled && (disabled = muiFormControl.disabled);
    const hasLabelFor = "checkbox" === type || "radio" === type;
    props = {...props, checked, disabled, disableFocusRipple, edge};
    const classes = useUtilityClasses(props);
    return (0,_jsxRuntime.jsxs)(SwitchBaseRoot, {component:"span", className:(0,_clsx.default)(classes.root, className), centerRipple:!0, focusRipple:!disableFocusRipple, disabled, tabIndex:null, role:void 0, onFocus:event => {
      onFocus && onFocus(event);
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    }, onBlur:event => {
      onBlur && onBlur(event);
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    }, ownerState:props, ref, ...other, children:[(0,_jsxRuntime.jsx)(SwitchBaseInput, {autoFocus, checked:checkedProp, defaultChecked, className:classes.input, disabled, id:hasLabelFor ? id : void 0, name, onChange:event => {
      if (!event.nativeEvent.defaultPrevented) {
        var newChecked = event.target.checked;
        setCheckedState(newChecked);
        onChange && onChange(event, newChecked);
      }
    }, readOnly, ref:inputRef, required, ownerState:props, tabIndex, type, ...("checkbox" === type && void 0 === value ? {} : {value}), ...inputProps}), checked ? checkedIcon : icon]});
  });
  require.propTypes = {autoFocus:global.default.bool, checked:global.default.bool, checkedIcon:global.default.node.isRequired, classes:global.default.object, className:global.default.string, defaultChecked:global.default.bool, disabled:global.default.bool, disableFocusRipple:global.default.bool, edge:global.default.oneOf(["end", "start", !1]), icon:global.default.node.isRequired, id:global.default.string, inputProps:global.default.object, inputRef:module.default, name:global.default.string, onBlur:global.default.func, 
  onChange:global.default.func, onFocus:global.default.func, readOnly:global.default.bool, required:global.default.bool, sx:global.default.object, tabIndex:global.default.oneOfType([global.default.number, global.default.string]), type:global.default.string.isRequired, value:global.default.any};
  exports.default = require;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$internal$SwitchBase.js.map
