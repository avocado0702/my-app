shadow$provide.module$node_modules$$mui$material$node$useLazyRipple$useLazyRipple = function(global, require, module, exports) {
  function createControlledPromise() {
    let resolve, reject;
    const p = new Promise((resolveFn, rejectFn) => {
      resolve = resolveFn;
      reject = rejectFn;
    });
    p.resolve = resolve;
    p.reject = reject;
    return p;
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.LazyRipple = void 0;
  exports.default = function() {
    return LazyRipple.use();
  };
  var React = module(require("module$node_modules$react$index")), _useLazyRef = global(require("module$node_modules$$mui$utils$useLazyRef$index"));
  class LazyRipple {
    static create() {
      return new LazyRipple();
    }
    static use() {
      const ripple = (0,_useLazyRef.default)(LazyRipple.create).current, [shouldMount, setShouldMount] = React.useState(!1);
      ripple.shouldMount = shouldMount;
      ripple.setShouldMount = setShouldMount;
      React.useEffect(ripple.mountEffect, [shouldMount]);
      return ripple;
    }
    constructor() {
      this.mountEffect = () => {
        this.shouldMount && !this.didMount && null !== this.ref.current && (this.didMount = !0, this.mounted.resolve());
      };
      this.ref = {current:null};
      this.mounted = null;
      this.shouldMount = this.didMount = !1;
      this.setShouldMount = null;
    }
    mount() {
      this.mounted || (this.mounted = createControlledPromise(), this.shouldMount = !0, this.setShouldMount(this.shouldMount));
      return this.mounted;
    }
    start(...args) {
      this.mount().then(() => this.ref.current?.start(...args));
    }
    stop(...args) {
      this.mount().then(() => this.ref.current?.stop(...args));
    }
    pulsate(...args) {
      this.mount().then(() => this.ref.current?.pulsate(...args));
    }
  }
  exports.LazyRipple = LazyRipple;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$useLazyRipple$useLazyRipple.js.map
