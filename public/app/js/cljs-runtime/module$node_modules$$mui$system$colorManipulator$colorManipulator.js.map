{
"version":3,
"file":"module$node_modules$$mui$system$colorManipulator$colorManipulator.js",
"lineCount":177,
"mappings":"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",
"sources":["node_modules/@mui/system/colorManipulator/colorManipulator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$system$colorManipulator$colorManipulator\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.blend = blend;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\"@mui/utils/formatMuiErrorMessage\"));\nvar _clamp = _interopRequireDefault(require(\"@mui/utils/clamp\"));\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return (0, _clamp.default)(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (!['rgb', 'rgba', 'hsl', 'hsla', 'color'].includes(type)) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\\n` + 'The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().' : (0, _formatMuiErrorMessage2.default)(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (!['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].includes(colorSpace)) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\\n` + 'The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.' : (0, _formatMuiErrorMessage2.default)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes('hsl') && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexports.colorChannel = colorChannel;\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexports.private_safeColorChannel = private_safeColorChannel;\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.includes('rgb')) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.includes('hsl')) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.includes('color')) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.startsWith('#')) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.includes('hsl')) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.includes('rgb') || color.type.includes('color')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.includes('hsl')) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.includes('rgb')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.includes('color')) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return emphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nfunction blend(background, overlay, opacity, gamma = 1.0) {\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}\n};"],
"names":["shadow$provide","global","require","module","exports","clampWrapper","value","min","max","console","error","_clamp","default","hexToRgb","color","slice","colors","match","re","RegExp","length","map","n","index","parseInt","Math","round","join","decomposeColor","type","charAt","marker","indexOf","substring","includes","Error","values","colorSpace","split","shift","parseFloat","recomposeColor","i","hslToRgb","h","l","a","f","k","rgb","push","getLuminance","val","Number","toFixed","alpha","darken","coefficient","lighten","emphasize","_interopRequireDefault","Object","defineProperty","blend","background","overlay","opacity","gamma","blendChannel","b","o","backgroundColor","overlayColor","colorChannel","getContrastRatio","foreground","lumA","lumB","private_safeAlpha","warning","warn","private_safeColorChannel","private_safeDarken","private_safeEmphasize","private_safeLighten","rgbToHex","startsWith","hex","toString","int","decomposedColor","idx"]
}
