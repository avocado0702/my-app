shadow$provide.module$node_modules$$mui$system$Grid$gridGenerator = function(global, require, module, exports) {
  function getSelfSpacingVar(axis) {
    return `--Grid-${axis}Spacing`;
  }
  function getParentSpacingVar(axis) {
    return `--Grid-parent-${axis}Spacing`;
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.generateSpacingClassNames = exports.generateSizeClassNames = exports.generateGridStyles = exports.generateGridSizeStyles = exports.generateGridRowSpacingStyles = exports.generateGridOffsetStyles = exports.generateGridDirectionStyles = exports.generateGridColumnsStyles = exports.generateGridColumnSpacingStyles = exports.generateDirectionClasses = void 0;
  var _traverseBreakpoints = require("module$node_modules$$mui$system$Grid$traverseBreakpoints");
  exports.generateGridSizeStyles = ({theme, ownerState}) => {
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.size, (appendStyle, value) => {
      let style = {};
      "grow" === value && (style = {flexBasis:0, flexGrow:1, maxWidth:"100%"});
      "auto" === value && (style = {flexBasis:"auto", flexGrow:0, flexShrink:0, maxWidth:"none", width:"auto"});
      "number" === typeof value && (style = {flexGrow:0, flexBasis:"auto", width:`calc(100% * ${value} / var(${"--Grid-parent-columns"}) - (var(${"--Grid-parent-columns"}) - ${value}) * (var(${getParentSpacingVar("column")}) / var(${"--Grid-parent-columns"})))`});
      appendStyle(styles, style);
    });
    return styles;
  };
  exports.generateGridOffsetStyles = ({theme, ownerState}) => {
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.offset, (appendStyle, value) => {
      let style = {};
      "auto" === value && (style = {marginLeft:"auto"});
      "number" === typeof value && (style = {marginLeft:0 === value ? "0px" : `calc(100% * ${value} / var(${"--Grid-parent-columns"}) + var(${getParentSpacingVar("column")}) * ${value} / var(${"--Grid-parent-columns"}))`});
      appendStyle(styles, style);
    });
    return styles;
  };
  exports.generateGridColumnsStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const styles = {["--Grid-columns"]:12};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
      value = value ?? 12;
      appendStyle(styles, {["--Grid-columns"]:value, "\x3e *":{["--Grid-parent-columns"]:value}});
    });
    return styles;
  };
  exports.generateGridRowSpacingStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
      value = "string" === typeof value ? value : theme.spacing?.(value);
      appendStyle(styles, {[getSelfSpacingVar("row")]:value, "\x3e *":{[getParentSpacingVar("row")]:value}});
    });
    return styles;
  };
  exports.generateGridColumnSpacingStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
      value = "string" === typeof value ? value : theme.spacing?.(value);
      appendStyle(styles, {[getSelfSpacingVar("column")]:value, "\x3e *":{[getParentSpacingVar("column")]:value}});
    });
    return styles;
  };
  exports.generateGridDirectionStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
      appendStyle(styles, {flexDirection:value});
    });
    return styles;
  };
  exports.generateGridStyles = ({ownerState}) => ({minWidth:0, boxSizing:"border-box", ...(ownerState.container && {display:"flex", flexWrap:"wrap", ...(ownerState.wrap && "wrap" !== ownerState.wrap && {flexWrap:ownerState.wrap}), gap:`var(${getSelfSpacingVar("row")}) var(${getSelfSpacingVar("column")})`})});
  exports.generateSizeClassNames = size => {
    const classNames = [];
    Object.entries(size).forEach(([key, value]) => {
      !1 !== value && void 0 !== value && classNames.push(`grid-${key}-${String(value)}`);
    });
    return classNames;
  };
  exports.generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
    function isValidSpacing(val) {
      return void 0 === val ? !1 : "string" === typeof val && !Number.isNaN(Number(val)) || "number" === typeof val && 0 < val;
    }
    if (isValidSpacing(spacing)) {
      return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
    }
    if ("object" === typeof spacing && !Array.isArray(spacing)) {
      const classNames = [];
      Object.entries(spacing).forEach(([key, value]) => {
        isValidSpacing(value) && classNames.push(`spacing-${key}-${String(value)}`);
      });
      return classNames;
    }
    return [];
  };
  exports.generateDirectionClasses = direction => void 0 === direction ? [] : "object" === typeof direction ? Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`) : [`direction-xs-${String(direction)}`];
};

//# sourceMappingURL=module$node_modules$$mui$system$Grid$gridGenerator.js.map
