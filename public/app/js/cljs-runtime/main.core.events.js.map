{"version":3,"sources":["main/core/events.cljs"],"mappings":";AAKA,yDAAA,zDAACA,+HAAqC,WAAKC,EAAEA;AAAP,AAAUC;;AAGhD,yDAAA,zDAACC,6HAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBR;eAAnB,AAAAS,4CAAAD,WAAA,IAAA,tEAAqBG;eAArB,AAAAF,4CAAAD,WAAA,IAAA,tEAA8BI;AAA9B,AACE,IAAMC,QAAM,AAAA,4FAAYH;IAClBI,eAAa,eAAA,WAAAC,1BAACC;AAAD,AAAO,OAACC,6CAAE,AAAA,2FAAAF,kBAAcJ;GAAUE;IAC/CK,mBAAiB,eAAA,WAAAC,1BAACH;AAAD,AAAO,SAAK,AAACC,6CAAE,AAAA,2FAAAE,kBAAcR,eACjB,AAACM,6CAAE,AAAA,0FAAAE,kBAAcP;GACvBC;AAJ7B,AAKE,oBAAMK;AAAN,kDAAA,6KAAA,6DAAA,mFAAA,8EAAA,3VAA4B,iDAAA,sEAAA,vHAACE,8CAAMV;;AAAnC,oBAEMI;AAFN,kDAAA,gDAGW,iDAAA,sFAAA,vIAACM,8CAAMV;;AAHlB,AAAA,kDAAA,gDAIiB,iDAAA,sFAAA,vIAACU,8CAAMV;;;;;AAI7B,yDAAA,zDAACR,mIAEA,WAAAmB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAjB,4BAAAiB;SAAA,AAAAhB,4CAAAgB,eAAA,hEAAab;IAAbc,aAAAF;QAAA,AAAAb,4CAAAe,WAAA,IAAA,/DAAmBxB;eAAnB,AAAAS,4CAAAe,WAAA,IAAA,tEAAqBb;eAArB,AAAAF,4CAAAe,WAAA,IAAA,tEAA8BZ;uBAA9B,AAAAH,4CAAAe,WAAA,IAAA,9EAAuCC;AAAvC,AACE,oBAAM,eAAA,WAAAC,1BAACV;AAAD,AAAO,OAACC,6CAAE,AAAA,2FAAAS,kBAAcf;GAAU,AAAA,4FAAYD;AAApD,kDAAA,gDACW,iDAAA,yFAAA,1IAACU,8CAAMV;;AADlB,GAEM,AAACiB,gDAAKf,SAASa;AAFrB,kDAAA,gDAGW,iDAAA,yFAAA,1IAACL,8CAAMV;;AAHlB,AAAA,kDAAA,0fAAA,6DAAA,mFAAA,8EAAA,3kBAIqBA,/CACA,kDAAA,6EAAA,2CAAA,sEAAA,hPAACkB,gHACOC,uHACWlB,qEAAoBC,1VACvC,4WAAA,yFAAA,rcAACQ;;;;;AAIzB,yDAAA,zDAACrB,uIACsB,cAAA+B,HAAKpB;AAAL,AAAA,IAAAqB,aAAAD;QAAA,AAAArB,4CAAAsB,WAAA,IAAA,/DAAS/B;WAAT,AAAAS,4CAAAsB,WAAA,IAAA,lEAAWC;AAAX,AAAkB,wDAAA,jDAACZ,8CAAMV,wEAAiBsB;;AAEjE,yDAAA,zDAACjC,sIACsB,cAAAkC,HAAKvB;AAAL,AAAA,IAAAwB,aAAAD;QAAA,AAAAxB,4CAAAyB,WAAA,IAAA,/DAASlC;aAAT,AAAAS,4CAAAyB,WAAA,IAAA,pEAAWC;AAAX,AAAoB,wDAAA,jDAACf,8CAAMV,yEAAiByB;;AAEnE,yDAAA,zDAACpC,iIACsB,cAAAqC,HAAK1B;AAAL,AAAA,IAAA2B,aAAAD;QAAA,AAAA3B,4CAAA4B,WAAA,IAAA,/DAASrC;gBAAT,AAAAS,4CAAA4B,WAAA,IAAA,vEAAWC;AAAX,AACE,YAAA,ZAACC,oCAAuCD;;AACxC,wDAAA,jDAAClB,8CAAMV,kEAAc4B;;AAG9C,yDAAA,zDAACvC,qJACsB,cAAAyC,HAAK9B;AAAL,AAAA,IAAA+B,aAAAD;QAAA,AAAA/B,4CAAAgC,WAAA,IAAA,/DAASzC;2BAAT,AAAAS,4CAAAgC,WAAA,IAAA,lFAAWC;AAAX,AACE,wDAAA,jDAACtB,8CAAMV,yFAAyBgC;;AAEzD,yDAAA,zDAAC3C,6IACsB,cAAA4C,HAAKjC;AAAL,AAAA,IAAAkC,aAAAD;QAAA,AAAAlC,4CAAAmC,WAAA,IAAA,/DAAS5C;cAAT,AAAAS,4CAAAmC,WAAA,IAAA,rEAAWC;AAAX,AACE,YAAA,ZAACN,2CAA8CM;;AAC/C,wDAAA,jDAACzB,8CAAMV,gFAAqBmC;;AAGrD,yDAAA,zDAAC9C,6HAEA,cAAA+C,HAAKpC;AAAL,AAAA,IAAAqC,aAAAD;QAAA,AAAArC,4CAAAsC,WAAA,IAAA,/DAAS/C;cAAT,AAAAS,4CAAAsC,WAAA,IAAA,rEAAWC;AAAX,AACE,yDAAA,lDAACpB,+CAAOlB,iEAAc,WAAKuC;AAAL,AAAY,sDAAA,WAAAC,1DAACC;AAAD,AAAS,OAAClC,6CAAE,AAAA,gFAAAiC,kBAAQF;GAASC;;;AAElE,yDAAA,zDAAClD,qHAEA,WAAKW;AAAL,AACE,YAAA,ZAAC6B;;AACD,IAAMa,SAAO,2HAAA,zHAAI,AAACC,uBAAO,AAAA,4FAAY3C,UAEtB,gQAAA,/PAAK,AAAC4C,+CAAOC,cAAI,4CAAA,5CAACC,8FAAQ,AAAA,4FAAY9C;AAFrD,AAGE,yDAAA,6EAAA,2CAAA,yDAAA,uDAAA,WAAA,oEAAA,zWAACkB,+CAAOlB,iEAEAmB,4GACKuB;;AAIlB,yDAAA,zDAACrD,2HACsB,cAAA0D,HAAK/C;AAAL,AAAA,IAAAgD,aAAAD;QAAA,AAAAhD,4CAAAiD,WAAA,IAAA,/DAAS1D;uBAAT,AAAAS,4CAAAiD,WAAA,IAAA,9EAAWC;mBAAX,AAAAlD,4CAAAiD,WAAA,IAAA,1EAA4BE;kBAA5B,AAAAnD,4CAAAiD,WAAA,IAAA,zEAAyCG;mBAAzC,AAAApD,4CAAAiD,WAAA,IAAA,1EAAqDI;AAArD,AACE,YAAA,ZAACvB;;AACD,yDAAA,lDAACX,+CAAOlB,iEAEA,WAAKuC;AAAL,AACE,mDAAA,WAAAc,vDAACP;AAAD,AAAM,GAAI,AAACvC,6CAAE,AAAA,gFAAA8C,kBAAQJ;AACb,4DAAAI,iBAAA,sHAAA,gFAAA,5QAAC3C,6HACawC,mIACMC,oEACNC;;AAJhBC;;GAMDd;;;AAExC,yDAAA,zDAAClD,uIACsB,cAAAiE,HAAKtD;AAAL,AAAA,IAAAuD,aAAAD;QAAA,AAAAvD,4CAAAwD,WAAA,IAAA,/DAASjE;YAAT,AAAAS,4CAAAwD,WAAA,IAAA,nEAAWC;AAAX,AACE,wDAAA,jDAAC9C,8CAAMV,yEAAiBwD;;AAEjD,yDAAA,zDAACnE,iJACsB,cAAAoE,HAAKzD;AAAL,AAAA,IAAA0D,aAAAD;QAAA,AAAA1D,4CAAA2D,WAAA,IAAA,/DAASpE;cAAT,AAAAS,4CAAA2D,WAAA,IAAA,rEAAWC;sBAAX,AAAA5D,4CAAA2D,WAAA,IAAA,7EAAmBE;AAAnB,AACE,yDAAA,lDAAC1C,+CAAOlB,yEAEA,WAAKwD;AAAL,AACE,OAACV,4CAAI,WAAKe;AAAL,AACE,GAAI,AAACtD,6CAAE,AAAA,gFAAKsD,MAAMF;AAChB,0DAAA,nDAACjD,8CAAMmD,yEACaD;;AACpBC;;GACJL;;;AAExC,yDAAA,zDAACnE,uIAEA,cAAAyE,HAAK9D;AAAL,AAAA,IAAA+D,aAAAD;QAAA,AAAA/D,4CAAAgE,WAAA,IAAA,/DAASzE;eAAT,AAAAS,4CAAAgE,WAAA,IAAA,tEAAWC;AAAX,AACE,yDAAA,lDAAC9C,+CAAOlB,yEAAiBmB,eAAK6C;;AAEjC,yDAAA,zDAAC3E,2IACsB,WAAKW;AAAL,AACE,wDAAA,sEAAA,vHAACU,8CAAMV;;AAIhC,yDAAA,zDAACX,iJAEA,cAAA4E,HAAKjE;AAAL,AAAA,IAAAkE,aAAAD;QAAA,AAAAlE,4CAAAmE,WAAA,IAAA,/DAAS5E;cAAT,AAAAS,4CAAAmE,WAAA,IAAA,rEAAW/B;cAAX,AAAApC,4CAAAmE,WAAA,IAAA,rEAAmBP;AAAnB,AACE,4DAAA,mFAAA,xIAACQ,kDAAUnE,4JAEA,WAAKoE;AAAL,AAAY,OAACtB,4CAAI,WAAKuB;AAAL,AACE,GAAI,AAAC9D,6CAAE,AAAA,gFAAK8D,MAAMlC;AAChB,2DAAA,pDAACjB,+CAAOmD,6DAAY,WAAKb;AAAL,AACE,OAACV,4CAAI,WAAKe;AAAL,AACE,GAAI,AAACtD,6CAAE,AAAA,gFAAKsD,MAAMF;AAChB,2DAAA,pDAACzC,+CAAO2C,2EAAmBS;;AAC3BT;;GACJL;;;AAASa;;GAAOD;;;AAE9E,yDAAA,zDAAC/E,6HAEA,cAAAkF,HAAKvE;AAAL,AAAA,IAAAwE,aAAAD;QAAA,AAAAxE,4CAAAyE,WAAA,IAAA,/DAASlF;cAAT,AAAAS,4CAAAyE,WAAA,IAAA,rEAAWrC;cAAX,AAAApC,4CAAAyE,WAAA,IAAA,rEAAmBb;AAAnB,AACE,4DAAA,mFAAA,xIAACQ,kDAAUnE,4JACA,WAAKoE;AAAL,AACE,OAACtB,4CAAI,WAAKuB;AAAL,AACE,GAAI,AAAC9D,6CAAE,AAAA,gFAAK8D,MAAMlC;AAChB,2DAAA,pDAACjB,+CAAOmD,6DAAY,+CAAA,WAAAI,1DAAChC;AAAD,AAAS,OAAClC,6CAAE,AAAA,gFAAAkE,kBAAQd;;;AACxCU;;GACJD","names":["re_frame.core.reg_event_db","_","main.core.db/default-db","re_frame.core.reg_event_fx","p__27695","p__27696","map__27697","cljs.core/--destructure-map","cljs.core.get","vec__27698","cljs.core.nth","db","username","password","users","matched-user","p1__27693#","cljs.core/some","cljs.core._EQ_","matcher-password","p1__27694#","cljs.core.assoc","p__27702","p__27703","map__27704","vec__27705","password-confirm","p1__27701#","cljs.core.not_EQ_","cljs.core.update","cljs.core/conj","p__27708","vec__27709","page","p__27712","vec__27713","status","p__27716","vec__27717","edit-mode","js/console.log","p__27720","vec__27721","log-in-error-message","p__27724","vec__27725","plan-id","p__27729","vec__27730","item-id","items","p1__27728#","cljs.core.remove","new-id","cljs.core/empty?","cljs.core.reduce","cljs.core/max","cljs.core.map","p__27734","vec__27735","selected-item-id","edited-title","edited-text","edited-tasks","p1__27733#","p__27738","vec__27739","tasks","p__27742","vec__27743","task-id","new-description","task","p__27746","vec__27747","new-task","p__27750","vec__27751","cljs.core.update_in","plans","plan","cljs.core/not","p__27755","vec__27756","p1__27754#"],"sourcesContent":["(ns main.core.events\r\n  (:require [re-frame.core :as re-frame]\r\n            [main.core.db :refer [default-db]]))\r\n\r\n\r\n(re-frame/reg-event-db :initialize-db (fn [_ _] default-db))\r\n\r\n\r\n(re-frame/reg-event-fx\r\n :login-check\r\n (fn [{:keys [db]} [_ username password]]\r\n   (let [users (:user-list db)\r\n         matched-user (some #(= (:username %) username) users)\r\n         matcher-password (some #(and (= (:username %) username)\r\n                                      (= (:password %) password))\r\n                                users)] ; \u89e3\u5f15\u7528\u8ba2\u9605\u5bf9\u8c61\r\n     (cond matcher-password {:db (assoc db :is-logged-in true),\r\n                             :dispatch [:set-current-page :home]}\r\n           matched-user\r\n           {:db (assoc db :log-in-error-message \"Password is not correct!\")}\r\n           :else {:db (assoc db\r\n                             :log-in-error-message \"User does not exist!\")}))))\r\n\r\n\r\n(re-frame/reg-event-fx\r\n :create-account\r\n (fn [{:keys [db]} [_ username password password-confirm]]\r\n   (cond (some #(= (:username %) username) (:user-list db))\r\n         {:db (assoc db :register-error-message \"Username already exists!\")}\r\n         (not= password password-confirm)\r\n         {:db (assoc db :register-error-message \"Password does not match!\")}\r\n         :else {:db (-> db\r\n                        (update :user-list\r\n                                conj\r\n                                {:username username, :password password})\r\n                        (assoc :register-error-message \" \")),\r\n                :dispatch [:set-current-page :login]})))\r\n\r\n\r\n(re-frame/reg-event-db :set-current-page\r\n                       (fn [db [_ page]] (assoc db :current-page page)))\r\n\r\n(re-frame/reg-event-db :set-login-status\r\n                       (fn [db [_ status]] (assoc db :is-logged-in status)))\r\n\r\n(re-frame/reg-event-db :set-edit-mode\r\n                       (fn [db [_ edit-mode]]\r\n                         (js/console.log \"Setting edit mode to:\" edit-mode)\r\n                         (assoc db :edit-mode edit-mode)))\r\n\r\n\r\n(re-frame/reg-event-db :set-login-error-message\r\n                       (fn [db [_ log-in-error-message]]\r\n                         (assoc db :log-in-error-message log-in-error-message)))\r\n\r\n(re-frame/reg-event-db :set-selected-plan-id\r\n                       (fn [db [_ plan-id]]\r\n                         (js/console.log \"Setting selected plan id to:\" plan-id)\r\n                         (assoc db :selected-plan-id plan-id)))\r\n\r\n\r\n(re-frame/reg-event-db\r\n :delete-item\r\n (fn [db [_ item-id]]\r\n   (update db :plan-list (fn [items] (remove #(= (:id %) item-id) items)))))\r\n\r\n(re-frame/reg-event-db\r\n :add-item\r\n (fn [db]\r\n   (js/console.log \"Adding a new item\")\r\n   (let [new-id (if (empty? (:plan-list db))\r\n                  1\r\n                  (inc (reduce max (map :id (:plan-list db)))))]\r\n     (update db\r\n             :plan-list\r\n             conj\r\n             {:id new-id, :titel \"new plan\", :description \"new plan introduction\"}))))\r\n\r\n\r\n\r\n(re-frame/reg-event-db :update-plan\r\n                       (fn [db [_ selected-item-id edited-title edited-text edited-tasks]]\r\n                         (js/console.log \"Updating a plan item:\")\r\n                         (update db\r\n                                 :plan-list\r\n                                 (fn [items]\r\n                                   (map #(if (= (:id %) selected-item-id)\r\n                                           (assoc %\r\n                                                  :titel edited-title\r\n                                                  :description edited-text\r\n                                                  :tasks edited-tasks)\r\n                                           %)\r\n                                        items)))))\r\n\r\n(re-frame/reg-event-db :set-edited-tasks\r\n                       (fn [db [_ tasks]]\r\n                         (assoc db :edited-tasks tasks)))\r\n\r\n(re-frame/reg-event-db :update-task-description\r\n                       (fn [db [_ task-id new-description]]\r\n                         (update db\r\n                                 :edited-tasks\r\n                                 (fn [tasks]\r\n                                   (map (fn [task]\r\n                                          (if (= (:id task) task-id)\r\n                                            (assoc task\r\n                                                   :description new-description)\r\n                                            task))\r\n                                        tasks)))))\r\n\r\n(re-frame/reg-event-db\r\n :add-default-task\r\n (fn [db [_ new-task]]\r\n   (update db :edited-tasks conj new-task)))\r\n\r\n(re-frame/reg-event-db :reset-edited-tasks\r\n                       (fn [db]\r\n                         (assoc db :edited-tasks nil)))\r\n\r\n\r\n\r\n(re-frame/reg-event-db\r\n :toggle-task-completion\r\n (fn [db [_ plan-id task-id]]\r\n   (update-in db\r\n              [:plan-list]\r\n              (fn [plans] (map (fn [plan]\r\n                                 (if (= (:id plan) plan-id)\r\n                                   (update plan :tasks (fn [tasks]\r\n                                                         (map (fn [task]\r\n                                                                (if (= (:id task) task-id)\r\n                                                                  (update task :is-completed not)\r\n                                                                  task))\r\n                                                              tasks))) plan)) plans)))))\r\n\r\n(re-frame/reg-event-db\r\n :delete-task\r\n (fn [db [_ plan-id task-id]]\r\n   (update-in db [:plan-list]\r\n              (fn [plans]\r\n                (map (fn [plan]\r\n                       (if (= (:id plan) plan-id)\r\n                         (update plan :tasks (remove #(= (:id %) task-id)))\r\n                         plan))\r\n                     plans)))))\r\n\r\n\r\n\r\n"]}