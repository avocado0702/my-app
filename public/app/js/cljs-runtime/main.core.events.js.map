{"version":3,"sources":["main/core/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","main.core.db/default-db","re_frame.core.reg_event_fx","p__26108","p__26109","map__26110","cljs.core/--destructure-map","cljs.core.get","vec__26111","cljs.core.nth","db","username","password","users","matched-user","p1__26106#","cljs.core/some","cljs.core._EQ_","matcher-password","p1__26107#","cljs.core.assoc","p__26115","p__26116","map__26117","vec__26118","password-confirm","p1__26114#","cljs.core.not_EQ_","cljs.core.update","cljs.core/conj","p__26121","vec__26122","page","p__26125","vec__26126","status","p__26129","vec__26130","log-in-error-message","p__26134","vec__26135","item-id","js/console.log","items","p1__26133#","cljs.core.remove","new-id","cljs.core/empty?","cljs.core.reduce","cljs.core/max","cljs.core.map"],"sourcesContent":["(ns main.core.events\r\n  (:require [re-frame.core :as re-frame]\r\n            [main.core.db :refer [default-db]]))\r\n\r\n\r\n(re-frame/reg-event-db :initialize-db (fn [_ _] default-db))\r\n\r\n\r\n(re-frame/reg-event-fx\r\n  :login-check\r\n  (fn [{:keys [db]} [_ username password]]\r\n    (let [users (:user-list db)\r\n          matched-user (some #(= (:username %) username) users)\r\n          matcher-password (some #(and (= (:username %) username)\r\n                                       (= (:password %) password))\r\n                                 users)] ; \u89e3\u5f15\u7528\u8ba2\u9605\u5bf9\u8c61\r\n      (cond matcher-password {:db (assoc db :is-logged-in true),\r\n                              :dispatch [:set-current-page :home]}\r\n            matched-user\r\n              {:db (assoc db :log-in-error-message \"Password is not correct!\")}\r\n            :else {:db (assoc db\r\n                         :log-in-error-message \"User does not exist!\")}))))\r\n\r\n\r\n(re-frame/reg-event-fx\r\n  :create-account\r\n  (fn [{:keys [db]} [_ username password password-confirm]]\r\n    (cond (some #(= (:username %) username) (:user-list db))\r\n            {:db (assoc db :register-error-message \"Username already exists!\")}\r\n          (not= password password-confirm)\r\n            {:db (assoc db :register-error-message \"Password does not match!\")}\r\n          :else {:db (-> db\r\n                         (update :user-list\r\n                                 conj\r\n                                 {:username username, :password password})\r\n                         (assoc :register-error-message \" \")),\r\n                 :dispatch [:set-current-page :login]})))\r\n\r\n\r\n(re-frame/reg-event-db :set-current-page\r\n                       (fn [db [_ page]] (assoc db :current-page page)))\r\n\r\n(re-frame/reg-event-db :set-login-status\r\n                       (fn [db [_ status]] (assoc db :is-logged-in status)))\r\n\r\n\r\n(re-frame/reg-event-db :set-login-error-message\r\n                       (fn [db [_ log-in-error-message]]\r\n                         (assoc db :log-in-error-message log-in-error-message)))\r\n\r\n\r\n(re-frame/reg-event-db\r\n  :delete-item\r\n  (fn [db [_ item-id]]\r\n    (js/console.log \"Deleting a item:\")\r\n    (js/console.log \"Deleted item id:\" item-id)\r\n    (update db :plan-list (fn [items] (remove #(= (:id %) item-id) items)))))\r\n\r\n(re-frame/reg-event-db\r\n  :add-item\r\n  (fn [db]\r\n    (js/console.log \"Adding a new item\")\r\n    (let [new-id (if (empty? (:plan-list db)) \r\n                   1\r\n                   (inc (reduce max (map :id (:plan-list db)))))]  \r\n      (update db\r\n              :plan-list\r\n              conj\r\n              {:id new-id, :titel \"new plan\", :text \"new plan introduction\"}))))"]}