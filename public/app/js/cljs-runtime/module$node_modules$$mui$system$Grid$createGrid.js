shadow$provide.module$node_modules$$mui$system$Grid$createGrid = function(global, require, module, exports) {
  function useThemePropsDefault(props) {
    return (0,_useThemeProps.default)({props, name:"MuiGrid", defaultTheme});
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(options = {}) {
    function parseResponsiveProp(propValue, breakpoints, shouldUseValue = () => !0) {
      const parsedProp = {};
      if (null === propValue) {
        return parsedProp;
      }
      Array.isArray(propValue) ? propValue.forEach((value, index) => {
        null !== value && shouldUseValue(value) && breakpoints.keys[index] && (parsedProp[breakpoints.keys[index]] = value);
      }) : "object" === typeof propValue ? Object.keys(propValue).forEach(key => {
        const value = propValue[key];
        null !== value && void 0 !== value && shouldUseValue(value) && (parsedProp[key] = value);
      }) : parsedProp[breakpoints.keys[0]] = propValue;
      return parsedProp;
    }
    const {createStyledComponent = defaultCreateStyledComponent, useThemeProps = useThemePropsDefault, componentName = "MuiGrid"} = options, useUtilityClasses = (ownerState, theme) => {
      const {container, direction, spacing, wrap, size} = ownerState;
      ownerState = {root:["root", container && "container", "wrap" !== wrap && `wrap-xs-${String(wrap)}`, ...(0,_gridGenerator.generateDirectionClasses)(direction), ...(0,_gridGenerator.generateSizeClassNames)(size), ...(container ? (0,_gridGenerator.generateSpacingClassNames)(spacing, theme.breakpoints.keys[0]) : [])]};
      return (0,_composeClasses.default)(ownerState, slot => (0,_generateUtilityClass.default)(componentName, slot), {});
    }, GridRoot = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
    options = React.forwardRef(function(inProps, ref) {
      var theme = (0,_useTheme.default)(), themeProps = useThemeProps(inProps);
      themeProps = (0,_styleFunctionSx.extendSxProp)(themeProps);
      const {className, children, columns:columnsProp = 12, container = !1, component = "div", direction = "row", wrap = "wrap", size:sizeProp = {}, offset:offsetProp = {}, spacing:spacingProp = 0, rowSpacing:rowSpacingProp = spacingProp, columnSpacing:columnSpacingProp = spacingProp, unstable_level:level = 0, ...other} = themeProps, size = parseResponsiveProp(sizeProp, theme.breakpoints, val => !1 !== val), offset = parseResponsiveProp(offsetProp, theme.breakpoints);
      inProps = {...themeProps, level, columns:inProps.columns ?? (level ? void 0 : columnsProp), container, direction, wrap, spacing:inProps.spacing ?? (level ? void 0 : spacingProp), rowSpacing:inProps.rowSpacing ?? inProps.spacing ?? (level ? void 0 : rowSpacingProp), columnSpacing:inProps.columnSpacing ?? inProps.spacing ?? (level ? void 0 : columnSpacingProp), size, offset};
      theme = useUtilityClasses(inProps, theme);
      return (0,_jsxRuntime.jsx)(GridRoot, {ref, as:component, ownerState:inProps, className:(0,_clsx.default)(theme.root, className), ...other, children:React.Children.map(children, child => React.isValidElement(child) && (0,_isMuiElement.default)(child, ["Grid"]) && container && child.props.container ? React.cloneElement(child, {unstable_level:child.props?.unstable_level ?? level + 1}) : child)});
    });
    options.propTypes = {children:_propTypes.default.node, className:_propTypes.default.string, columns:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]), columnSpacing:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]), component:_propTypes.default.elementType, 
    container:_propTypes.default.bool, direction:_propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]), offset:_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])), _propTypes.default.object]), 
    rowSpacing:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]), size:_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool, _propTypes.default.number])), _propTypes.default.object]), 
    spacing:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]), sx:_propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]), wrap:_propTypes.default.oneOf(["nowrap", 
    "wrap-reverse", "wrap"])};
    options.muiName = "Grid";
    return options;
  };
  var React = module(require("module$node_modules$react$index")), _propTypes = global(require("module$node_modules$prop_types$index")), _clsx = global(require("module$node_modules$clsx$dist$clsx")), _isMuiElement = global(require("module$node_modules$$mui$utils$isMuiElement$index")), _generateUtilityClass = global(require("module$node_modules$$mui$utils$generateUtilityClass$index")), _composeClasses = global(require("module$node_modules$$mui$utils$composeClasses$index"));
  exports = global(require("module$node_modules$$mui$system$styled$index"));
  var _useThemeProps = global(require("module$node_modules$$mui$system$useThemeProps$index")), _useTheme = global(require("module$node_modules$$mui$system$useTheme$index")), _styleFunctionSx = require("module$node_modules$$mui$system$styleFunctionSx$index");
  global = global(require("module$node_modules$$mui$system$createTheme$index"));
  var _gridGenerator = require("module$node_modules$$mui$system$Grid$gridGenerator"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const defaultTheme = (0,global.default)(), defaultCreateStyledComponent = (0,exports.default)("div", {name:"MuiGrid", slot:"Root", overridesResolver:(props, styles) => styles.root});
};

//# sourceMappingURL=module$node_modules$$mui$system$Grid$createGrid.js.map
