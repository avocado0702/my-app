shadow$provide.module$node_modules$$mui$material$node$FormControl$FormControl = function(global, require, module, exports) {
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var React = module(require("module$node_modules$react$index"));
  module = global(require("module$node_modules$prop_types$index"));
  var _clsx = global(require("module$node_modules$clsx$dist$clsx")), _composeClasses = global(require("module$node_modules$$mui$utils$composeClasses$index")), _zeroStyled = require("module$node_modules$$mui$material$node$zero_styled$index"), _DefaultPropsProvider = require("module$node_modules$$mui$material$node$DefaultPropsProvider$index"), _utils = require("module$node_modules$$mui$material$node$InputBase$utils"), _capitalize = global(require("module$node_modules$$mui$material$node$utils$capitalize")), 
  _isMuiElement = global(require("module$node_modules$$mui$material$node$utils$isMuiElement")), _FormControlContext = global(require("module$node_modules$$mui$material$node$FormControl$FormControlContext")), _formControlClasses = require("module$node_modules$$mui$material$node$FormControl$formControlClasses"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const useUtilityClasses = ownerState => {
    const {classes, margin, fullWidth} = ownerState;
    ownerState = {root:["root", "none" !== margin && `margin${(0,_capitalize.default)(margin)}`, fullWidth && "fullWidth"]};
    return (0,_composeClasses.default)(ownerState, _formControlClasses.getFormControlUtilityClasses, classes);
  }, FormControlRoot = (0,_zeroStyled.styled)("div", {name:"MuiFormControl", slot:"Root", overridesResolver:({ownerState}, styles) => ({...styles.root, ...styles[`margin${(0,_capitalize.default)(ownerState.margin)}`], ...(ownerState.fullWidth && styles.fullWidth)})})({display:"inline-flex", flexDirection:"column", position:"relative", minWidth:0, padding:0, margin:0, border:0, verticalAlign:"top", variants:[{props:{margin:"normal"}, style:{marginTop:16, marginBottom:8}}, {props:{margin:"dense"}, 
  style:{marginTop:8, marginBottom:4}}, {props:{fullWidth:!0}, style:{width:"100%"}}]});
  require = React.forwardRef(function(inProps, ref) {
    inProps = (0,_DefaultPropsProvider.useDefaultProps)({props:inProps, name:"MuiFormControl"});
    const {children, className, color = "primary", component = "div", disabled = !1, error = !1, focused:visuallyFocused, fullWidth = !1, hiddenLabel = !1, margin = "none", required = !1, size = "medium", variant = "outlined", ...other} = inProps;
    inProps = {...inProps, color, component, disabled, error, fullWidth, hiddenLabel, margin, required, size, variant};
    const classes = useUtilityClasses(inProps), [adornedStart, setAdornedStart] = React.useState(() => {
      let initialAdornedStart = !1;
      children && React.Children.forEach(children, child => {
        (0,_isMuiElement.default)(child, ["Input", "Select"]) && (child = (0,_isMuiElement.default)(child, ["Select"]) ? child.props.input : child) && (0,_utils.isAdornedStart)(child.props) && (initialAdornedStart = !0);
      });
      return initialAdornedStart;
    }), [filled, setFilled] = React.useState(() => {
      let initialFilled = !1;
      children && React.Children.forEach(children, child => {
        (0,_isMuiElement.default)(child, ["Input", "Select"]) && ((0,_utils.isFilled)(child.props, !0) || (0,_utils.isFilled)(child.props.inputProps, !0)) && (initialFilled = !0);
      });
      return initialFilled;
    }), [focusedState, setFocused] = React.useState(!1);
    disabled && focusedState && setFocused(!1);
    const focused = void 0 === visuallyFocused || disabled ? focusedState : visuallyFocused;
    let registerEffect;
    const registeredInput = React.useRef(!1);
    registerEffect = () => {
      registeredInput.current && console.error("MUI: There are multiple `InputBase` components inside a FormControl.\nThis creates visual inconsistencies, only use one `InputBase`.");
      registeredInput.current = !0;
      return () => {
        registeredInput.current = !1;
      };
    };
    const childContext = React.useMemo(() => ({adornedStart, setAdornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, size, onBlur:() => {
      setFocused(!1);
    }, onEmpty:() => {
      setFilled(!1);
    }, onFilled:() => {
      setFilled(!0);
    }, onFocus:() => {
      setFocused(!0);
    }, registerEffect, required, variant}), [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return (0,_jsxRuntime.jsx)(_FormControlContext.default.Provider, {value:childContext, children:(0,_jsxRuntime.jsx)(FormControlRoot, {as:component, ownerState:inProps, className:(0,_clsx.default)(classes.root, className), ref, ...other, children})});
  });
  require.propTypes = {children:module.default.node, classes:module.default.object, className:module.default.string, color:module.default.oneOfType([module.default.oneOf("primary secondary error info success warning".split(" ")), module.default.string]), component:module.default.elementType, disabled:module.default.bool, error:module.default.bool, focused:module.default.bool, fullWidth:module.default.bool, hiddenLabel:module.default.bool, margin:module.default.oneOf(["dense", "none", "normal"]), 
  required:module.default.bool, size:module.default.oneOfType([module.default.oneOf(["medium", "small"]), module.default.string]), sx:module.default.oneOfType([module.default.arrayOf(module.default.oneOfType([module.default.func, module.default.object, module.default.bool])), module.default.func, module.default.object]), variant:module.default.oneOf(["filled", "outlined", "standard"])};
  exports.default = require;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$FormControl$FormControl.js.map
