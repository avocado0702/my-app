shadow$provide.module$node_modules$$mui$material$node$styles$createTypography = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(palette, typography) {
    const {fontFamily = '"Roboto", "Helvetica", "Arial", sans-serif', fontSize = 14, fontWeightLight = 300, fontWeightRegular = 400, fontWeightMedium = 500, fontWeightBold = 700, htmlFontSize = 16, allVariants, pxToRem:pxToRem2, ...other} = "function" === typeof typography ? typography(palette) : typography;
    "number" !== typeof fontSize && console.error("MUI: `fontSize` is required to be a number.");
    "number" !== typeof htmlFontSize && console.error("MUI: `htmlFontSize` is required to be a number.");
    const coef = fontSize / 14, pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
    palette = (fontWeight, size, lineHeight, letterSpacing, casing) => ({fontFamily, fontWeight, fontSize:pxToRem(size), lineHeight, ...('"Roboto", "Helvetica", "Arial", sans-serif' === fontFamily ? {letterSpacing:`${Math.round(letterSpacing / size * 1e5) / 1e5}em`} : {}), ...casing, ...allVariants});
    palette = {h1:palette(fontWeightLight, 96, 1.167, -1.5), h2:palette(fontWeightLight, 60, 1.2, -0.5), h3:palette(fontWeightRegular, 48, 1.167, 0), h4:palette(fontWeightRegular, 34, 1.235, 0.25), h5:palette(fontWeightRegular, 24, 1.334, 0), h6:palette(fontWeightMedium, 20, 1.6, 0.15), subtitle1:palette(fontWeightRegular, 16, 1.75, 0.15), subtitle2:palette(fontWeightMedium, 14, 1.57, 0.1), body1:palette(fontWeightRegular, 16, 1.5, 0.15), body2:palette(fontWeightRegular, 14, 1.43, 0.15), button:palette(fontWeightMedium, 
    14, 1.75, 0.4, caseAllCaps), caption:palette(fontWeightRegular, 12, 1.66, 0.4), overline:palette(fontWeightRegular, 12, 2.66, 1, caseAllCaps), inherit:{fontFamily:"inherit", fontWeight:"inherit", fontSize:"inherit", lineHeight:"inherit", letterSpacing:"inherit"}};
    return (0,_deepmerge.default)({htmlFontSize, pxToRem, fontFamily, fontSize, fontWeightLight, fontWeightRegular, fontWeightMedium, fontWeightBold, ...palette}, other, {clone:!1});
  };
  var _deepmerge = global(require("module$node_modules$$mui$utils$deepmerge$index"));
  const caseAllCaps = {textTransform:"uppercase"};
};

//# sourceMappingURL=module$node_modules$$mui$material$node$styles$createTypography.js.map
