shadow$provide.module$node_modules$$mui$system$styleFunctionSx$extendSxProp = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(props) {
    const {sx:inSx, ...other} = props, {systemProps, otherProps} = splitProps(other);
    props = Array.isArray(inSx) ? [systemProps, ...inSx] : "function" === typeof inSx ? (...args) => {
      args = inSx(...args);
      return (0,_deepmerge.isPlainObject)(args) ? {...systemProps, ...args} : systemProps;
    } : {...systemProps, ...inSx};
    return {...otherProps, sx:props};
  };
  var _deepmerge = require("module$node_modules$$mui$utils$deepmerge$index"), _defaultSxConfig = global(require("module$node_modules$$mui$system$styleFunctionSx$defaultSxConfig"));
  const splitProps = props => {
    const result = {systemProps:{}, otherProps:{}}, config = props?.theme?.unstable_sxConfig ?? _defaultSxConfig.default;
    Object.keys(props).forEach(prop => {
      config[prop] ? result.systemProps[prop] = props[prop] : result.otherProps[prop] = props[prop];
    });
    return result;
  };
};

//# sourceMappingURL=module$node_modules$$mui$system$styleFunctionSx$extendSxProp.js.map
