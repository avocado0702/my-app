shadow$provide.module$node_modules$$mui$material$node$FormHelperText$FormHelperText = function(global, require, module, exports) {
  "use client";
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var React = module(require("module$node_modules$react$index"));
  global = _interopRequireDefault(require("module$node_modules$prop_types$index"));
  var _clsx = _interopRequireDefault(require("module$node_modules$clsx$dist$clsx")), _composeClasses = _interopRequireDefault(require("module$node_modules$$mui$utils$composeClasses$index")), _formControlState = _interopRequireDefault(require("module$node_modules$$mui$material$node$FormControl$formControlState")), _useFormControl = _interopRequireDefault(require("module$node_modules$$mui$material$node$FormControl$useFormControl")), _zeroStyled = require("module$node_modules$$mui$material$node$zero_styled$index"), 
  _memoTheme = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$memoTheme")), _DefaultPropsProvider = require("module$node_modules$$mui$material$node$DefaultPropsProvider$index"), _capitalize = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$capitalize")), _formHelperTextClasses = module(require("module$node_modules$$mui$material$node$FormHelperText$formHelperTextClasses")), _jsxRuntime = require("module$node_modules$react$jsx_runtime"), _span;
  const FormHelperTextRoot = (0,_zeroStyled.styled)("p", {name:"MuiFormHelperText", slot:"Root", overridesResolver:(props, styles) => {
    ({ownerState:props} = props);
    return [styles.root, props.size && styles[`size${(0,_capitalize.default)(props.size)}`], props.contained && styles.contained, props.filled && styles.filled];
  }})((0,_memoTheme.default)(({theme}) => ({color:(theme.vars || theme).palette.text.secondary, ...theme.typography.caption, textAlign:"left", marginTop:3, marginRight:0, marginBottom:0, marginLeft:0, [`&.${_formHelperTextClasses.default.disabled}`]:{color:(theme.vars || theme).palette.text.disabled}, [`&.${_formHelperTextClasses.default.error}`]:{color:(theme.vars || theme).palette.error.main}, variants:[{props:{size:"small"}, style:{marginTop:4}}, {props:({ownerState}) => ownerState.contained, 
  style:{marginLeft:14, marginRight:14}}]})));
  require = React.forwardRef(function(inProps, ref) {
    inProps = (0,_DefaultPropsProvider.useDefaultProps)({props:inProps, name:"MuiFormHelperText"});
    const {children, className, component = "p", disabled, error, filled, focused, margin, required, variant, ...other} = inProps;
    var muiFormControl = (0,_useFormControl.default)();
    muiFormControl = (0,_formControlState.default)({props:inProps, muiFormControl, states:"variant size disabled error filled focused required".split(" ")});
    inProps = {...inProps, component, contained:"filled" === muiFormControl.variant || "outlined" === muiFormControl.variant, variant:muiFormControl.variant, size:muiFormControl.size, disabled:muiFormControl.disabled, error:muiFormControl.error, filled:muiFormControl.filled, focused:muiFormControl.focused, required:muiFormControl.required};
    delete inProps.ownerState;
    const {classes, contained, size, disabled:disabled$jscomp$0, error:error$jscomp$0, filled:filled$jscomp$0, focused:focused$jscomp$0, required:required$jscomp$0} = inProps;
    muiFormControl = {root:["root", disabled$jscomp$0 && "disabled", error$jscomp$0 && "error", size && `size${(0,_capitalize.default)(size)}`, contained && "contained", focused$jscomp$0 && "focused", filled$jscomp$0 && "filled", required$jscomp$0 && "required"]};
    muiFormControl = (0,_composeClasses.default)(muiFormControl, _formHelperTextClasses.getFormHelperTextUtilityClasses, classes);
    return (0,_jsxRuntime.jsx)(FormHelperTextRoot, {as:component, className:(0,_clsx.default)(muiFormControl.root, className), ref, ...other, ownerState:inProps, children:" " === children ? _span || (_span = (0,_jsxRuntime.jsx)("span", {className:"notranslate", children:"â€‹"})) : children});
  });
  require.propTypes = {children:global.default.node, classes:global.default.object, className:global.default.string, component:global.default.elementType, disabled:global.default.bool, error:global.default.bool, filled:global.default.bool, focused:global.default.bool, margin:global.default.oneOf(["dense"]), required:global.default.bool, sx:global.default.oneOfType([global.default.arrayOf(global.default.oneOfType([global.default.func, global.default.object, global.default.bool])), global.default.func, 
  global.default.object]), variant:global.default.oneOfType([global.default.oneOf(["filled", "outlined", "standard"]), global.default.string])};
  exports.default = require;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$FormHelperText$FormHelperText.js.map
