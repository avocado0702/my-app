shadow$provide.module$node_modules$$mui$material$node$Modal$useModal = function(global, require, module, exports) {
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var React = module(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$index"), _extractEventHandlers = global(require("module$node_modules$$mui$utils$extractEventHandlers$index")), _ModalManager = require("module$node_modules$$mui$material$node$Modal$ModalManager");
  const manager = new _ModalManager.ModalManager();
  exports.default = function(parameters) {
    const {container, disableEscapeKeyDown = !1, disableScrollLock = !1, closeAfterTransition = !1, onTransitionEnter, onTransitionExited, children, onClose, open, rootRef} = parameters, modal = React.useRef({}), mountNodeRef = React.useRef(null), modalRef = React.useRef(null), handleRef = (0,_utils.unstable_useForkRef)(modalRef, rootRef), [exited, setExited] = React.useState(!open), hasTransition = children ? children.props.hasOwnProperty("in") : !1;
    let ariaHiddenProp = !0;
    if ("false" === parameters["aria-hidden"] || !1 === parameters["aria-hidden"]) {
      ariaHiddenProp = !1;
    }
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    }, handleMounted = () => {
      manager.mount(getModal(), {disableScrollLock});
      modalRef.current && (modalRef.current.scrollTop = 0);
    }, handleOpen = (0,_utils.unstable_useEventCallback)(() => {
      const resolvedContainer = ("function" === typeof container ? container() : container) || (0,_utils.unstable_ownerDocument)(mountNodeRef.current).body;
      manager.add(getModal(), resolvedContainer);
      modalRef.current && handleMounted();
    }), handlePortalRef = (0,_utils.unstable_useEventCallback)(node => {
      (mountNodeRef.current = node) && (open && manager.isTopModal(getModal()) ? handleMounted() : modalRef.current && (0,_ModalManager.ariaHidden)(modalRef.current, ariaHiddenProp));
    }), handleClose = React.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp]);
    React.useEffect(() => () => {
      handleClose();
    }, [handleClose]);
    React.useEffect(() => {
      open ? handleOpen() : hasTransition && closeAfterTransition || handleClose();
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = otherHandlers => event => {
      otherHandlers.onKeyDown?.(event);
      "Escape" === event.key && 229 !== event.which && manager.isTopModal(getModal()) && !disableEscapeKeyDown && (event.stopPropagation(), onClose && onClose(event, "escapeKeyDown"));
    }, createHandleBackdropClick = otherHandlers => event => {
      otherHandlers.onClick?.(event);
      event.target === event.currentTarget && onClose && onClose(event, "backdropClick");
    };
    return {getRootProps:(otherHandlers = {}) => {
      const propsEventHandlers = (0,_extractEventHandlers.default)(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      otherHandlers = {...propsEventHandlers, ...otherHandlers};
      return {role:"presentation", ...otherHandlers, onKeyDown:createHandleKeyDown(otherHandlers), ref:handleRef};
    }, getBackdropProps:(otherHandlers = {}) => ({"aria-hidden":!0, ...otherHandlers, onClick:createHandleBackdropClick(otherHandlers), open}), getTransitionProps:() => ({onEnter:(0,_utils.unstable_createChainedFunction)(() => {
      setExited(!1);
      onTransitionEnter && onTransitionEnter();
    }, children?.props.onEnter), onExited:(0,_utils.unstable_createChainedFunction)(() => {
      setExited(!0);
      onTransitionExited && onTransitionExited();
      closeAfterTransition && handleClose();
    }, children?.props.onExited)}), rootRef:handleRef, portalRef:handlePortalRef, isTopModal:() => manager.isTopModal(getModal()), exited, hasTransition};
  };
};

//# sourceMappingURL=module$node_modules$$mui$material$node$Modal$useModal.js.map
