shadow$provide.module$node_modules$$mui$system$createBreakpoints$createBreakpoints = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.breakpointKeys = void 0;
  exports.default = function(breakpoints) {
    function up(key) {
      return `@media (min-width:${"number" === typeof values[key] ? values[key] : key}${unit})`;
    }
    function down(key) {
      return `@media (max-width:${("number" === typeof values[key] ? values[key] : key) - step / 100}${unit})`;
    }
    function between(start, end) {
      const endIndex = keys.indexOf(end);
      return `@media (min-width:${"number" === typeof values[start] ? values[start] : start}${unit}) and ` + `(max-width:${(-1 !== endIndex && "number" === typeof values[keys[endIndex]] ? values[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    const {values = {xs:0, sm:600, md:900, lg:1200, xl:1536}, unit = "px", step = 5, ...other} = breakpoints;
    breakpoints = sortBreakpointsValues(values);
    const keys = Object.keys(breakpoints);
    return {keys, values:breakpoints, up, down, between, only:function(key) {
      return keys.indexOf(key) + 1 < keys.length ? between(key, keys[keys.indexOf(key) + 1]) : up(key);
    }, not:function(key) {
      const keyIndex = keys.indexOf(key);
      return 0 === keyIndex ? up(keys[1]) : keyIndex === keys.length - 1 ? down(keys[keyIndex]) : between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }, unit, ...other};
  };
  exports.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
  const sortBreakpointsValues = values => {
    const breakpointsAsArray = Object.keys(values).map(key => ({key, val:values[key]})) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => ({...acc, [obj.key]:obj.val}), {});
  };
};

//# sourceMappingURL=module$node_modules$$mui$system$createBreakpoints$createBreakpoints.js.map
