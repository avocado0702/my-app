shadow$provide.module$node_modules$$mui$material$node$utils$useSlot = function(global, require, module, exports) {
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(name, parameters) {
    const {className, elementType:initialElementType, ownerState, externalForwardedProps, getSlotOwnerState, internalForwardedProps, ...useSlotPropsParams} = parameters, {component:rootComponent, slots = {[name]:void 0}, slotProps = {[name]:void 0}, ...other} = externalForwardedProps, elementType = slots[name] || initialElementType;
    var resolvedComponentsProps = (0,_resolveComponentProps.default)(slotProps[name], ownerState);
    const {props:{component:slotComponent, ...mergedProps}, internalRef} = (0,_mergeSlotProps.default)({className, ...useSlotPropsParams, externalForwardedProps:"root" === name ? other : void 0, externalSlotProps:resolvedComponentsProps});
    parameters = (0,_useForkRef.default)(internalRef, resolvedComponentsProps?.ref, parameters.ref);
    resolvedComponentsProps = getSlotOwnerState ? getSlotOwnerState(mergedProps) : {};
    const LeafComponent = "root" === name ? slotComponent || rootComponent : slotComponent, props = (0,_appendOwnerState.default)(elementType, {...("root" === name && !rootComponent && !slots[name] && internalForwardedProps), ...("root" !== name && !slots[name] && internalForwardedProps), ...mergedProps, ...(LeafComponent && {as:LeafComponent}), ref:parameters}, {...ownerState, ...resolvedComponentsProps});
    Object.keys(resolvedComponentsProps).forEach(propName => {
      delete props[propName];
    });
    return [elementType, props];
  };
  var _useForkRef = global(require("module$node_modules$$mui$utils$useForkRef$index")), _appendOwnerState = global(require("module$node_modules$$mui$utils$appendOwnerState$index")), _resolveComponentProps = global(require("module$node_modules$$mui$utils$resolveComponentProps$index")), _mergeSlotProps = global(require("module$node_modules$$mui$utils$mergeSlotProps$index"));
};

//# sourceMappingURL=module$node_modules$$mui$material$node$utils$useSlot.js.map
