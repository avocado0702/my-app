shadow$provide.module$node_modules$$mui$material$node$FormControlLabel$FormControlLabel = function(global, require, module, exports) {
  "use client";
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default, _interopRequireWildcard = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = exports.FormControlLabelRoot = void 0;
  var React = _interopRequireWildcard(require("module$node_modules$react$index"));
  global = _interopRequireDefault(require("module$node_modules$prop_types$index"));
  var _clsx = _interopRequireDefault(require("module$node_modules$clsx$dist$clsx"));
  module = _interopRequireDefault(require("module$node_modules$$mui$utils$refType$index"));
  var _composeClasses = _interopRequireDefault(require("module$node_modules$$mui$utils$composeClasses$index")), _FormControl = require("module$node_modules$$mui$material$node$FormControl$index"), _zeroStyled = require("module$node_modules$$mui$material$node$zero_styled$index"), _memoTheme = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$memoTheme")), _DefaultPropsProvider = require("module$node_modules$$mui$material$node$DefaultPropsProvider$index"), _Typography = _interopRequireDefault(require("module$node_modules$$mui$material$node$Typography$index")), 
  _capitalize = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$capitalize")), _formControlLabelClasses = _interopRequireWildcard(require("module$node_modules$$mui$material$node$FormControlLabel$formControlLabelClasses")), _formControlState = _interopRequireDefault(require("module$node_modules$$mui$material$node$FormControl$formControlState")), _useSlot = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$useSlot")), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const useUtilityClasses = ownerState => {
    const {classes, disabled, labelPlacement, error, required} = ownerState;
    ownerState = {root:["root", disabled && "disabled", `labelPlacement${(0,_capitalize.default)(labelPlacement)}`, error && "error", required && "required"], label:["label", disabled && "disabled"], asterisk:["asterisk", error && "error"]};
    return (0,_composeClasses.default)(ownerState, _formControlLabelClasses.getFormControlLabelUtilityClasses, classes);
  }, FormControlLabelRoot = exports.FormControlLabelRoot = (0,_zeroStyled.styled)("label", {name:"MuiFormControlLabel", slot:"Root", overridesResolver:(props, styles) => {
    ({ownerState:props} = props);
    return [{[`& .${_formControlLabelClasses.default.label}`]:styles.label}, styles.root, styles[`labelPlacement${(0,_capitalize.default)(props.labelPlacement)}`]];
  }})((0,_memoTheme.default)(({theme}) => ({display:"inline-flex", alignItems:"center", cursor:"pointer", verticalAlign:"middle", WebkitTapHighlightColor:"transparent", marginLeft:-11, marginRight:16, [`&.${_formControlLabelClasses.default.disabled}`]:{cursor:"default"}, [`& .${_formControlLabelClasses.default.label}`]:{[`&.${_formControlLabelClasses.default.disabled}`]:{color:(theme.vars || theme).palette.text.disabled}}, variants:[{props:{labelPlacement:"start"}, style:{flexDirection:"row-reverse", 
  marginRight:-11}}, {props:{labelPlacement:"top"}, style:{flexDirection:"column-reverse"}}, {props:{labelPlacement:"bottom"}, style:{flexDirection:"column"}}, {props:({labelPlacement}) => "start" === labelPlacement || "top" === labelPlacement || "bottom" === labelPlacement, style:{marginLeft:16}}]}))), AsteriskComponent = (0,_zeroStyled.styled)("span", {name:"MuiFormControlLabel", slot:"Asterisk", overridesResolver:(props, styles) => styles.asterisk})((0,_memoTheme.default)(({theme}) => ({[`&.${_formControlLabelClasses.default.error}`]:{color:(theme.vars || 
  theme).palette.error.main}})));
  require = React.forwardRef(function(inProps, ref) {
    const props = (0,_DefaultPropsProvider.useDefaultProps)({props:inProps, name:"MuiFormControlLabel"}), {checked, className, componentsProps = {}, control, disabled:disabledProp, disableTypography, inputRef, label:labelProp, labelPlacement = "end", name, onChange, required:requiredProp, slots = {}, slotProps = {}, value, ...other} = props;
    var muiFormControl = (0,_FormControl.useFormControl)(), disabled = disabledProp ?? control.props.disabled ?? muiFormControl?.disabled;
    inProps = requiredProp ?? control.props.required;
    const controlProps = {disabled, required:inProps};
    ["checked", "name", "onChange", "value", "inputRef"].forEach(key => {
      "undefined" === typeof control.props[key] && "undefined" !== typeof props[key] && (controlProps[key] = props[key]);
    });
    muiFormControl = (0,_formControlState.default)({props, muiFormControl, states:["error"]});
    disabled = {...props, disabled, labelPlacement, required:inProps, error:muiFormControl.error};
    muiFormControl = useUtilityClasses(disabled);
    const [TypographySlot, typographySlotProps] = (0,_useSlot.default)("typography", {elementType:_Typography.default, externalForwardedProps:{slots, slotProps:{...componentsProps, ...slotProps}}, ownerState:disabled});
    let label = labelProp;
    null == label || label.type === _Typography.default || disableTypography || (label = (0,_jsxRuntime.jsx)(TypographySlot, {component:"span", ...typographySlotProps, className:(0,_clsx.default)(muiFormControl.label, typographySlotProps?.className), children:label}));
    return (0,_jsxRuntime.jsxs)(FormControlLabelRoot, {className:(0,_clsx.default)(muiFormControl.root, className), ownerState:disabled, ref, ...other, children:[React.cloneElement(control, controlProps), inProps ? (0,_jsxRuntime.jsxs)("div", {children:[label, (0,_jsxRuntime.jsxs)(AsteriskComponent, {ownerState:disabled, "aria-hidden":!0, className:muiFormControl.asterisk, children:["â€‰", "*"]})]}) : label]});
  });
  require.propTypes = {checked:global.default.bool, classes:global.default.object, className:global.default.string, componentsProps:global.default.shape({typography:global.default.object}), control:global.default.element.isRequired, disabled:global.default.bool, disableTypography:global.default.bool, inputRef:module.default, label:global.default.node, labelPlacement:global.default.oneOf(["bottom", "end", "start", "top"]), name:global.default.string, onChange:global.default.func, required:global.default.bool, 
  slotProps:global.default.shape({typography:global.default.oneOfType([global.default.func, global.default.object])}), slots:global.default.shape({typography:global.default.elementType}), sx:global.default.oneOfType([global.default.arrayOf(global.default.oneOfType([global.default.func, global.default.object, global.default.bool])), global.default.func, global.default.object]), value:global.default.any};
  exports.default = require;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$FormControlLabel$FormControlLabel.js.map
