shadow$provide.module$node_modules$$mui$system$InitColorSchemeScript$InitColorSchemeScript = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_ATTRIBUTE = void 0;
  exports.default = function(options) {
    const {defaultMode = "system", defaultLightColorScheme = "light", defaultDarkColorScheme = "dark", modeStorageKey = DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY, attribute:initialAttribute = DEFAULT_ATTRIBUTE, colorSchemeNode = "document.documentElement", nonce} = options || {};
    options = "";
    let attribute = initialAttribute;
    "class" === initialAttribute && (attribute = ".%s");
    "data" === initialAttribute && (attribute = "[data-%s]");
    if (attribute.startsWith(".")) {
      var selector = attribute.substring(1);
      options += `${colorSchemeNode}.classList.remove('${selector}'.replace('%s', light), '${selector}'.replace('%s', dark));
      ${colorSchemeNode}.classList.add('${selector}'.replace('%s', colorScheme));`;
    }
    if (selector = attribute.match(/\[([^\]]+)\]/)) {
      const [attr, value] = selector[1].split("\x3d");
      value || (options += `${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', light));
      ${colorSchemeNode}.removeAttribute('${attr}'.replace('%s', dark));`);
      options += `
      ${colorSchemeNode}.setAttribute('${attr}'.replace('%s', colorScheme), ${value ? `${value}.replace('%s', colorScheme)` : '""'});`;
    } else {
      options += `${colorSchemeNode}.setAttribute('${attribute}', colorScheme);`;
    }
    return (0,_jsxRuntime.jsx)("script", {suppressHydrationWarning:!0, nonce:"undefined" === typeof window ? nonce : "", dangerouslySetInnerHTML:{__html:`(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  const dark = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  const light = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
    ${options}
  }
} catch(e){}})();`}}, "mui-color-scheme-init");
  };
  global(require("module$node_modules$react$index"));
  var _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_MODE_STORAGE_KEY = "mode", DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme", DEFAULT_ATTRIBUTE = exports.DEFAULT_ATTRIBUTE = "data-color-scheme";
};

//# sourceMappingURL=module$node_modules$$mui$system$InitColorSchemeScript$InitColorSchemeScript.js.map
