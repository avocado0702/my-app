shadow$provide.module$node_modules$$mui$utils$useControlled$useControlled = function(global, require, module, exports) {
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function({controlled, default:defaultProp, name, state = "value"}) {
    const {current:isControlled} = React.useRef(void 0 !== controlled), [valueState, setValue] = React.useState(defaultProp), value = isControlled ? controlled : valueState;
    React.useEffect(() => {
      isControlled !== (void 0 !== controlled) && console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} ` + "element for the lifetime of the component.", "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\nMore info: https://fb.me/react-controlled-components"].join("\n"));
    }, [state, name, controlled]);
    const {current:defaultValue} = React.useRef(defaultProp);
    React.useEffect(() => {
      isControlled || Object.is(defaultValue, defaultProp) || console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join("\n"));
    }, [JSON.stringify(defaultProp)]);
    const setValueIfUncontrolled = React.useCallback(newValue => {
      isControlled || setValue(newValue);
    }, []);
    return [value, setValueIfUncontrolled];
  };
  var React = global(require("module$node_modules$react$index"));
};

//# sourceMappingURL=module$node_modules$$mui$utils$useControlled$useControlled.js.map
