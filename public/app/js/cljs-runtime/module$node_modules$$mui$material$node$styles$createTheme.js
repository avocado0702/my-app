shadow$provide.module$node_modules$$mui$material$node$styles$createTheme = function(global, require, module, exports) {
  function attachColorScheme(theme, scheme, colorScheme) {
    theme.colorSchemes && colorScheme && (theme.colorSchemes[scheme] = {...(!0 !== colorScheme && colorScheme), palette:(0,_createPalette.default)({...(!0 === colorScheme ? {} : colorScheme.palette), mode:scheme})});
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  Object.defineProperty(exports, "createMuiTheme", {enumerable:!0, get:function() {
    return _createThemeNoVars.createMuiTheme;
  }});
  exports.default = function(options = {}, ...args) {
    const {palette, cssVariables = !1, colorSchemes:initialColorSchemes = palette ? void 0 : {light:!0}, defaultColorScheme:initialDefaultColorScheme = palette?.mode, ...rest} = options, defaultColorSchemeInput = initialDefaultColorScheme || "light";
    var defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];
    defaultScheme = {...initialColorSchemes, ...(palette ? {[defaultColorSchemeInput]:{...("boolean" !== typeof defaultScheme && defaultScheme), palette}} : void 0)};
    if (!1 === cssVariables) {
      if (!("colorSchemes" in options)) {
        return (0,_createThemeNoVars.default)(options, ...args);
      }
      let paletteOptions = palette;
      "palette" in options || !defaultScheme[defaultColorSchemeInput] || (!0 !== defaultScheme[defaultColorSchemeInput] ? paletteOptions = defaultScheme[defaultColorSchemeInput].palette : "dark" === defaultColorSchemeInput && (paletteOptions = {mode:"dark"}));
      options = (0,_createThemeNoVars.default)({...options, palette:paletteOptions}, ...args);
      options.defaultColorScheme = defaultColorSchemeInput;
      options.colorSchemes = defaultScheme;
      "light" === options.palette.mode && (options.colorSchemes.light = {...(!0 !== defaultScheme.light && defaultScheme.light), palette:options.palette}, attachColorScheme(options, "dark", defaultScheme.dark));
      "dark" === options.palette.mode && (options.colorSchemes.dark = {...(!0 !== defaultScheme.dark && defaultScheme.dark), palette:options.palette}, attachColorScheme(options, "light", defaultScheme.light));
      return options;
    }
    palette || "light" in defaultScheme || "light" !== defaultColorSchemeInput || (defaultScheme.light = !0);
    return (0,_createThemeWithVars.default)({...rest, colorSchemes:defaultScheme, defaultColorScheme:defaultColorSchemeInput, ...("boolean" !== typeof cssVariables && cssVariables)}, ...args);
  };
  var _createPalette = module(require("module$node_modules$$mui$material$node$styles$createPalette")), _createThemeWithVars = module(require("module$node_modules$$mui$material$node$styles$createThemeWithVars")), _createThemeNoVars = global(require("module$node_modules$$mui$material$node$styles$createThemeNoVars"));
};

//# sourceMappingURL=module$node_modules$$mui$material$node$styles$createTheme.js.map
