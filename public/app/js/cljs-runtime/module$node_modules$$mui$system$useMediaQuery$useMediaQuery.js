shadow$provide.module$node_modules$$mui$system$useMediaQuery$useMediaQuery = function(global, require, module, exports) {
  function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const [match, setMatch] = React.useState(() => noSsr && matchMedia ? matchMedia(query).matches : ssrMatchMedia ? ssrMatchMedia(query).matches : defaultMatches);
    (0,_useEnhancedEffect.default)(() => {
      if (matchMedia) {
        var queryList = matchMedia(query), updateMatch = () => {
          setMatch(queryList.matches);
        };
        setMatch(queryList.matches);
        queryList.addEventListener("change", updateMatch);
        return () => {
          queryList.removeEventListener("change", updateMatch);
        };
      }
    }, [query, matchMedia]);
    return match;
  }
  function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]), getServerSnapshot = React.useMemo(() => {
      if (noSsr && matchMedia) {
        return () => matchMedia(query).matches;
      }
      if (null !== ssrMatchMedia) {
        const {matches} = ssrMatchMedia(query);
        return () => matches;
      }
      return getDefaultSnapshot;
    }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]), [getSnapshot, subscribe] = React.useMemo(() => {
      if (null === matchMedia) {
        return [getDefaultSnapshot, () => () => {
        }];
      }
      const mediaQueryList = matchMedia(query);
      return [() => mediaQueryList.matches, notify => {
        mediaQueryList.addEventListener("change", notify);
        return () => {
          mediaQueryList.removeEventListener("change", notify);
        };
      }];
    }, [getDefaultSnapshot, matchMedia, query]);
    return maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault").default;
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard").default;
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(queryInput, options = {}) {
    const theme = (0,_useThemeWithoutDefault.default)(), supportMatchMedia = "undefined" !== typeof window && "undefined" !== typeof window.matchMedia, {defaultMatches = !1, matchMedia = supportMatchMedia ? window.matchMedia : null, ssrMatchMedia = null, noSsr = !1} = (0,_useThemeProps.getThemeProps)({name:"MuiUseMediaQuery", props:options, theme});
    "function" === typeof queryInput && null === theme && console.error("MUI: The `query` argument provided is invalid.\nYou are providing a function without a theme in the context.\nOne of the parent elements needs to use a ThemeProvider.");
    queryInput = "function" === typeof queryInput ? queryInput(theme) : queryInput;
    queryInput = queryInput.replace(/^@media( ?)/m, "");
    options = (void 0 !== maybeReactUseSyncExternalStore ? useMediaQueryNew : useMediaQueryOld)(queryInput, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    React.useDebugValue({query:queryInput, match:options});
    return options;
  };
  var React = module(require("module$node_modules$react$index")), _useEnhancedEffect = global(require("module$node_modules$$mui$utils$useEnhancedEffect$index")), _useThemeProps = require("module$node_modules$$mui$system$useThemeProps$index"), _useThemeWithoutDefault = global(require("module$node_modules$$mui$system$useThemeWithoutDefault$index"));
  const maybeReactUseSyncExternalStore = {...React}.useSyncExternalStore;
};

//# sourceMappingURL=module$node_modules$$mui$system$useMediaQuery$useMediaQuery.js.map
